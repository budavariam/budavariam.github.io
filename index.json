[{"content":"A few weeks ago I came across a post about recommended static site generators. I decided to reevaluate my previous choice for a blog engine. I used Jekyll and Gatsby.js before, now I wanted something new.\nHugo PaperMod Many people recommended Hugo.go, I decided to give it a try. After browsing for a while in the themes Papermod caught my eye. It has a similar minimalistic vibe, as my previous site, but also has many embedded features out of the box. 🎉\nI forked it and started to tweak it, to keep the features I liked in my previous page.\nMy first impression is that hugo is really blazing fast.\nTemplating It took me some hours to figure out the logic behind the templating. I spent the most time with the social icons, to keep the feature, that I only need to specify the username, and it uses the proper icon AND the proper URL. Later on I got so confident in this strange syntax, I even implemented inverse logarithmic scale coloring for tag numbers, so small differences stand out more than with a simple linear scale.\nSVG icons I had some extra logic to be able to modify svg icons separate from the code, I just needed to replace a few lines of code, to make it work.\nI hopped on the chance to add svgo to the mix, to generate optimized svg-s to the site, no matter what I save in my folder.\nDeployment For deployment Jekyll has first level support from github. Github actions has templates for hugo deployment, it should work just fine.\nNew features I dedicate this chapter to the new feature I love in PaperMod, that I did not have before.\n sexier typography, nice looking components cover images scroll to top button quick search autodetect or switch between dark mode/lightmode read time for posts emoij parser paginated view for all posts post archive tags / show posts by tags  I hope you like the new look and feel as much as I do.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2021/03/02/new-blog-theme/","summary":"\u003cp\u003eA few weeks ago I came across a post about recommended static site generators.\nI decided to reevaluate my previous choice for a blog engine.\nI used \u003ca href=\"https://jekyllrb.com/\"\u003eJekyll\u003c/a\u003e and\n\u003ca href=\"https://www.gatsbyjs.com/\"\u003eGatsby.js\u003c/a\u003e before, now I wanted something new.\u003c/p\u003e","title":"New Blog Theme"},{"content":"In the past few days I\u0026rsquo;ve been working in manual mode on multiple linux boxes simultaneously. I have to follow logs, modify configurations and kill/start applications all at once. I got confused pretty fast of what server am I connected to in a certain console pane, and where are my operations. On top of that my ISP had a huge traffic hit these days, and my VPN connection dropped constantly. I dusted off my knowledge about some tools that boosted my productivity.\nI usually don\u0026rsquo;t like to repeat myself, and supposedly I\u0026rsquo;ll have to do these modifications for many more machines. So as I see something is working, I take a note of the solution and create a script as I go. I have to see that it works manually, in order to automatize it.\nSSH SSH provides secure shell connection to a remote machine. You can work in it just like your local machine. There are multiple authentication methods, I found ssh public key auth feasible in my use case.\n put ssh keys into authorized-keys of the remote user simply, if you already have access to the server  ssh-copy-id \u0026lt;connection\u0026gt;   sshpass make it easy to use ssh-copy-id in a script  sshpass -p $secretpass ssh-copy-id \u0026lt;connection\u0026gt;   remember the passphrases of the ssh keys  ssh-add -K ${key_location}   ssh port forward  ssh -N -L LOCAL_PORT:localhost:REMOTE_PORT \u0026lt;connection\u0026gt;   copy keys to the server  scp ~/.ssh/my_keyprefix_* '\u0026lt;connection\u0026gt;:~/.ssh/'   start ssh service  sudo systemctl start ssh.service   attach to the already existing byobu session (see below):  ssh -t byobu    Where \u0026lt;connection\u0026gt; is the data necessary to establish the ssh connection. Most likely an identity file and the server address: -i ~/.ssh/my_keyprefix.pem user@192.168.1.101. I think it\u0026rsquo;s better to use SSH Config. If you specify Host myserver in the config, you can use case myserver for the \u0026lt;connection\u0026gt; part.\nSSH Permissions SSH is picky with the permission settings.\n The home folder that contains .ssh folder can not have group write permission. .ssh folder should have 700 octal permission .ssh/authorized_keys and public keys should have 644 octal permission .ssh/config should have 600 octal permission private keys under .ssh/ should have 600 octal permission  Permission basics Octal permissions in linux specify the permissions of the owner, group and others as the numbers respectively.\nThe permissions can be any combination of: read (4), write (2) and execute (1).\nWith that in mind: 644 permission means read permission for everyone, and an extra write permission for the owner.\nPermissions can be set with chmod command like: chmod $octal_permission filelist.\nSSH Config I think it\u0026rsquo;s amazing that you can collect ssh configurations under a custom name, and you can use that name to connect to the specified server.\nYou need to set the necessary data into:~/.ssh/config.\nHost server-1 User customuser HostName 192.168.42.123 IdentityFile /var/opt/customdata/.ssh/id_ed25519 I used rsync to keep some code up to date in my systems, and it made the code significantly easier and less error prone to reference the ssh config already set, instead of typing it out.\nRsync does not proide automatic resync out of the box, but a little bash magic can do wonders.\nprojectpath=\u0026#34;~/projects/thisproject\u0026#34; machine=\u0026#34;server-1\u0026#34; # this is the Host in .ssh/config run_rsync() { rsync -azuv --no-o --no-g \\  --exclude \u0026#34;logs\u0026#34; \\  --exclude \u0026#34;.git\u0026#34; \\  \u0026#34;${projectpath}\u0026#34; \\  \u0026#34;$machine\u0026#34;:/opt } run_rsync; fswatch -o \u0026#34;${projectpath}\u0026#34; | \\  while read f; do run_rsync; done Debug SSH connection problems You can debug ssh issues with the verbose flag on the client side, e.g: ssh -vvv server-1.\nIf you need to debug your issues on the server side, you can set the ssh service to print debug logs by setting LogLevel DEBUG in /etc/ssh/sshd_config. You need to restart the sshd service to apply this modification. systemctl restart sshd\nView the logs with e.g: journalctl -f -u sshd.\nIn my case I needed to access a user that had his home folder outside /home AND had his password locked. On top of that their home folder had group write permissions by default. Such a thrill.\nLocked password The locked password made it harder to put out the ssh key, there are 2 simple solutions to choose from\nOne would be to set a password manually with: passwd customuser as a root user, then use ssh=copy-id as usual, and finally lock the password again with passwd --lock customuser.\nThe other solution is to append the public key manually to ~customuser/.ssh/authorized_keys.\nHome folder outside /home In my case selinux did not know that this folder can be used as an ssh_home folder. These few lines permanently fixed it.\nsudo semanage fcontext -a -t ssh_home_t ~customuser/.ssh/authorized_keys sudo semanage fcontext -a -t ssh_home_t ~customuser/.ssh sudo restorecon -R -v ~customuser/.ssh/ chmod g-w ~customuser Welcome message When I log in to a box, I found it beneficial to print a huge unique identifier of where I logged in exactly. It made it easier to keep track of what\u0026rsquo;s happening.\nI found a great tool called FIGlet, that can generate ASCII art like text from ordinary text. As a small practice project, in my free time I put together a simple webapp to showcase an already existing JS renderer.\n____ _____ ____ __ __ _____ ____ _ / ___| | ____|| _ \\\\ \\ / /| ____|| _ \\ / | \\___ \\ | _| | |_) |\\ \\ / / | _| | |_) | _____ | | ___) || |___ | _ \u0026lt; \\ V / | |___ | _ \u0026lt; |_____| | | |____/ |_____||_| \\_\\ \\_/ |_____||_| \\_\\ |_| But of course I could have just used cowsay.\n________________________________ \u0026lt; Welcome to St. James Ballroom! \u0026gt; -------------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || Set SSH banner SSH banner prints a message when an ssh session connects, before the used logs in.\nI aimed for a simple banner, centos have a wiki page that explains the simple steps to achieve it, but since it\u0026rsquo;s ssh config it should work similarly in other distributions.\n Create a /etc/issue.net file and fill it with the desired plaintext context Edit /etc/ssh/sshd_config, to have this line: Banner /etc/issue.net Restart sshd: systemctl restart sshd  In linux you can specify welcome messages, when you log in, it\u0026rsquo;s called Message Of The Day or MOTD for short. That opens up after the user has logged in, and before the shell started up. It can be cpntrolled usually in /etc/motd.\nTerminal multiplexers Terminal multiplexers make it easy to manage long running processes in remote machines. They\u0026rsquo;re especially useful if you have an unreliable network connection, you can start up a session in the remote machine, and when you log in to the machine the next time, you can connect to the same session.\nThey let you create multiple windows/panes, thus provide a better experience than forward/background jobs.\nYou can have multiple sessions in a machine at a given time, multiple users can log in to them.\nYou can use it in your local machine as well, and log in to it from multiple shell emulators if that\u0026rsquo;s what you need.\nScreen and tmux GNU screen is there since 1987, widely available.\nscreen -S sessionName # create session with a name screen -r sessionName # reconnect to named session screen -ls # list current sessions screen -XS sessionName quit # terminate session screen -r -d # reconnect to the last session screen -xr # share screen tmux is newer, created in 2007, has a huge community around it. They operate with key chords, both have a meta character that marks the actions for the multiplexer.\ntmux new -s session_name # create session with a name tmux attach-session -t session_name # reconnect to named session tmux ls # list current sessions tmux kill-session -t session_name # terminate session tmux new -As0 # attach to default session if exists Byobu My favourite is byobu, it\u0026rsquo;s a config layer over the other two above. It provides a simple interface for their functionalities. Byobu maps its functionality to the F1-F12 keys.\nYou can use the key chords that you\u0026rsquo;re used to, even select the underlying backend on start.\nbyobu byobu-screen # any tmux options can be given byobu-tmux # any screen options can be given Basic Keybinding comparison    Byobu Tmux Screen Description      CTRL+b CTRL-a default meta   shift+F1 meta ? meta ? help   F6 meta d meta d detach from session         F2 meta c meta CTRL-C create new tab    meta w meta \u0026quot; choose tab from a list   F3 meta n meta CTRL-N next tab   F4 meta p meta CTRL-P prev tab    meta 0 meta CTRL-0 switch to tab (0 can be any number)         shift+F2 meta \u0026quot; meta SHIFT-s split horizontally   CTRL+F2 meta % meta | split vertically    meta o meta TAB switch to pane    meta x meta SHIFT-x close the pane that has focus   F8 meta , meta SHIFT-a rename tab   F7 meta [ meta ESC start scroll mode    meta q  show pane numbers if you press a number the cursor will jump to it    meta ;  toggle between prev/current pane    meta SPACE  toggle between layouts    meta z  toggle zoom to pane     Note that Byobu can use the underlying backend\u0026rsquo;s keybindings as well.\n Happy coding!\n","permalink":"http://budavariam.github.io/posts/2021/02/27/think-outside-the-box/","summary":"\u003cp\u003eIn the past few days I\u0026rsquo;ve been working in manual mode on multiple linux boxes simultaneously.\nI have to follow logs, modify configurations and kill/start applications all at once.\nI got confused pretty fast of what server am I connected to in a certain console pane, and where are my operations.\nOn top of that my ISP had a huge traffic hit these days, and my VPN connection dropped constantly.\nI dusted off my knowledge about some tools that boosted my productivity.\u003c/p\u003e","title":"Think Outside The Box"},{"content":"I usually work with *nix systems, and I process text all the time. This consists of CLI tool output, config file modifications and log files scanning. These utilities make it easy to search and manipulate plaintext data. I think they\u0026rsquo;re an essential part of any developer\u0026rsquo;s toolbox.\nThese commands can read either from the standard input, a single file or multiple files.\nGrep Grep\u0026rsquo;s name comes from the ed command g/re/p, which roughly means, globally look for a regular expression and print. Perfect for simple regex matches of single lines.\ngrep [flags] [pattern] [filenames]\nNotable grep flags  -E extended regexp -q exit code marks the result (success is 0) -v lines that do not match -n matched line and line number -l only the names of files that contain a match -c count of the matching lines (not the number of matches) -i case insensitive match -o print only matching part (interesting with regex) -e define multiple patterns --color use colors always/never/auto  Grep examples example=\u0026#34;\\ For instance, on the planet Earth, man had always assumed that he was more intelligent than dolphins because he had achieved so much — the wheel, New York, wars and so on — whilst all the dolphins had ever done was muck about in the water having a good time. But conversely, the dolphins had always believed that they were far more intelligent than man — for precisely the same reasons.\u0026#34; # Match exact text echo \u0026#34;$example\u0026#34; | grep \u0026#39;man\u0026#39; # Match exactly \u0026#39;the\u0026#39;, \u0026#39;than\u0026#39; or \u0026#39;for\u0026#39; words # case insensitive (\\b is word boundary) echo \u0026#34;$example\u0026#34; | grep -iE \u0026#39;\\b(the|than|for)\\b\u0026#39; # Print only the matching part of the string # (can not print part of it, like groups) echo \u0026#34;$example\u0026#34; | grep -Eo \u0026#39;dolphins \\w+\u0026#39; # Do not print lines that contain \u0026#34;the\u0026#34; echo \u0026#34;$example\u0026#34; | grep -Ev \u0026#39;\\bthe\\b\u0026#39; # Count the lines that contain \u0026#34;good\u0026#34; echo \u0026#34;$example\u0026#34; | grep -c \u0026#39;good\u0026#39; # Filter lines that contain a # punctuation mark OR start with a lowercase letter echo \u0026#34;$example\u0026#34; | grep --color=never -E -e \u0026#39;[.,-]\u0026#39; -e \u0026#39;^[a-z]\u0026#39; Similar utilities  egrep - extended regex pattern, like grep -E fgrep - faster, but works only for fixed patterns zgrep/zegrep/zfgrep - for compressed files pgrep - search processes and print the PID of matching ones ack-grep has the functionality of grep, but optimized for developers silver seracher is similar to ack, but faster  Sed Sed is a powerful stream editor. For a more comprehensive guide check out this awesome post.\nI\u0026rsquo;ll show some commands that you can be productive with in no time.\nsed [flags] [pattern] [filenames]\nNotable sed flags  -E extended regexp -n show ony those lines, that we explicitly print -e chain multiple commands -i edit files in place  Basic commands  print: p delete: d substitute: s/regexp pattern/replace to this string/modifiers  fence characters after substitutiion that defines the fields can be any character, choose one that does not appear in your patterns. It has to be a single character. in replace string you can matching regular expression:  \u0026amp; to reference the whole pattern \\1-\\9 to reference the groups by number   modifiers can be:  g: global flag, match all occurrances in each line p: print result NUMBER: the NUMBERth match in the line      Addresses You can optionally specify addresses before the command in which the command acts upon:\n line number line range separated by comma, where the last line can be referenced with $ a regular expression to define which lines do you want to run the script to fenced by forward slashes  Addresses can be negated if you put a ! between the address and the command.\nSed Examples example=\u0026#34;\\ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ut enim quis nisl ultrices molestie eu in nibh. In sit amet odio et tellus sagittis semper sed at urna. Pellentesque feugiat ipsum eget dignissim mattis. Donec accumsan nibh sit amet mi ornare, a faucibus diam euismod. \u0026#34; # Print 2nd line echo \u0026#34;$example\u0026#34; | sed -n \u0026#39;2 p\u0026#39; echo \u0026#34;$example\u0026#34; | sed \u0026#39;2! d\u0026#39; # Print 2-5th line only echo \u0026#34;$example\u0026#34; | sed -n \u0026#39;2,5 p\u0026#39; # Print from 3rd line until the end of the file echo \u0026#34;$example\u0026#34; | sed -n \u0026#39;2,$ p\u0026#39; # Delete lines thet contain \u0026#39;Lorem\u0026#39; echo \u0026#34;$example\u0026#34; | sed \u0026#39;/Lorem/ d\u0026#39; # Replace all \u0026#39;amet\u0026#39; with \u0026#39;tema\u0026#39; echo \u0026#34;$example\u0026#34; | sed \u0026#39;s/amet/tema/g\u0026#39; # Replace second \u0026#39;m\u0026#39; to \u0026#39;M\u0026#39; in each line echo \u0026#34;$example\u0026#34; | sed \u0026#39;sⓜ️M:2\u0026#39; # Put \u0026#39;ipsum\u0026#39; in square brackets echo \u0026#34;$example\u0026#34; | sed -E \u0026#39;s/(ipsum)/[\\1]/g\u0026#39; # Chain multiple commands together # replace the 2nd and third lines to numbers, then # print even numbers twice echo \u0026#34;$example\u0026#34; | sed \\  -e \u0026#39;2,3 s_^.*$_1234567890_\u0026#39; \\  -e \u0026#39;s/\\([02468]\\)/\u0026amp;\u0026amp;/g\u0026#39; AWK AWK is a record-based pattern-directed text processing language. It\u0026rsquo;s name comes from the last names of its creators.\nAn AWK script builds up from Pattern-Action pairs.\nAWK splits the input into records. Splits the records into fields.\nFrom start to end, match the defined patterns with the records, to determine whether it needs to perform the action of that pattern.\nIt allows you to write complex programs with it, I advise you to take some time to get familiar with the main functionality.\nNotable AWK flags  -F define input field separator regexp -f load code from a file -v var=value set variables before staring up  Patterns Empty pattern matches for every line.\nSpecial patterns BEGIN/END define action before the first input line is read, and after the last input is read respectively\nPatterns can be combined together:\n simple regular-expression  regular-expression is fenced by forward slashes   boolean operators: AND: \u0026amp;\u0026amp;, OR: ||, NOT: ! expression matchop regular-expression  matchop is one of the following ~ matches !~ does not match   expression relop expression  relational operator is one of the following  == Equal to \u0026gt; Greater than \u0026lt; Less than != Not equal to \u0026gt;= Greater than or equal to \u0026lt;= Less than or equal to     expression in array-name  array-name   (expr,expr,\u0026hellip;) in array-name if 2 patterns are defined separated by a comma, then the action will be performed from the first occurrance of the fist pattern until the first occurrance of the second pattern  Actions  Missing action means to print the whole line. Actions are surrounded by curly brackets. Commands are terminated by semicolons/newlines/right braces. Fields can be accessed as $NUMBER, where number is the index of the field starting from 1. $0 contains the whole line. AWK has associative arrays, meaning its indexes can be strings, or numbers  You can define them in the following format: arrayname[index] = value AWK does not support multi-dimensional arrays, but you can emulate it by concatenating the dimension indixes as a string   In expressions the variables need not use $ signes in their names. Strings are concatenated together by spaces  We can write complex programs in our AWK actions to process the input fields.\nThe following lines come from the manual as-is. The parts between [] are optional, except when it refers to array indexing. Other characters are as-is.\n Statements  if( expression ) statement [ else statement ] while( expression ) statement for( expression ; expression ; expression ) statement for( var in array ) statement do statement while( expression ) break continue { [ statement ... ] } expression commonly var = expression print [ expression-list ] [ \u0026gt; expression ] printf format [ , expression-list ] [ \u0026gt; expression ] return [ expression ] next skip remaining patterns on this input line nextfile skip rest of this file, open next, start at top delete array[ expression ] delete an array element delete array delete all elements of array exit [ expression ] exit immediately; status is expression   Other functions  mathematical functions: atan2, cos, exp, log, sin, and sqrt length the length of its argument taken as a string, number of elements in an array for an array argument, or length of $0 if no argument. rand random number on [0,1). srand sets seed for rand and returns the previous seed. int truncates to an integer value. substr(s, m [, n]): the n-character substring of s that begins at position m counted from 1. If no n, use the rest of the string. index(s, t): the position in s where the string t occurs, or 0 if it does not. match(s, r): the position in s where the regular expression r occurs, or 0 if it does not. The variables RSTART and RLENGTH are set to the position and length of the matched string. split(s, a [, fs]): splits the string s into array elements a[1], a[2], ..., a[n], and returns n. The separation is done with the regular expression fs or with the field separator FS if fs is not given. An empty string as field separator splits the string into one array element per character. sub(r, t [, s]): substitutes t for the first occurrence of the regular expression r in the string s. If s is not given, $0 is used. gsub(r, t [, s]): same as sub except that all occurrences of the regular expression are replaced; sub and gsub return the number of replacements. sprintf(fmt, expr, ...): the string resulting from formatting expr ... according to the printf(3) format fmt. system(cmd): executes cmd and returns its exit status. This will be -1 upon error, cmd\u0026rsquo;s exit status upon a normal exit, 256 + sig upon death-by-signal, where sig is the number of the murdering signal, or 512 + sig if there was a core dump. tolower(str): returns a copy of str with all upper-case characters translated to their corresponding lower-case equivalents. toupper(str): returns a copy of str with all lower-case characters translated to their corresponding upper-case equivalents.    Special variables AWK provides information about the state of the processing and environment\n   variable name description     RS Specifies the record separator.   FS Specifies the field separator.   FIELDWIDTHS Specifies the field width.   OFS Specifies the Output separator.   ORS Specifies the Output separator.   NF Fields count of the line being processed.   NR Retrieves total count of processed records.   FNR The record which is processed.   ARGC Retrieves the number of passed parameters.   ARGV Retrieves the command line parameters.   ENVIRON Array of the shell environment variables and corresponding values.    AWK Examples # AWK examples from man page # Print lines longer than 72 characters. length($0) \u0026gt; 72 # Print first two fields in opposite order. { print $2, $1 } # Same, with input fields separated # by comma and/or spaces and tabs. BEGIN { FS = \u0026#34;,[ \\t]*|[ \\t]+\u0026#34; } { print $2, $1 } # Add up first column, print sum and average. { s += $1 } END { print \u0026#34;sum is\u0026#34;, s, \u0026#34; average is\u0026#34;, s/NR } # Print all lines between start/stop pairs. /start/, /stop/ # Simulate echo(1) BEGIN { for (i = 1; i \u0026lt; ARGC; i++) printf \u0026#34;%s \u0026#34;, ARGV[i] printf \u0026#34;\\n\u0026#34; exit }  Learn more from this great tutorial  Disclaimer I did not get anything from making this post,\nMy main goal was to host an evolving cheatsheet for myself when I forget all this, and need to apply it quickly.\nI hope you learned something from it as well.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2021/02/18/grep-sed-awk-filters/","summary":"\u003cp\u003eI usually work with *nix systems, and I process text all the time.\nThis consists of CLI tool output, config file modifications and log files scanning.\nThese utilities make it easy to search and manipulate plaintext data.\nI think they\u0026rsquo;re an essential part of any developer\u0026rsquo;s toolbox.\u003c/p\u003e","title":"Grep Sed AWK Filters"},{"content":"I\u0026rsquo;m currently following the trends with my dev setup. I use dark theme in almost all of my tools. That make my Mission Control a monochrome mess. Most of my tools have theming options, so a few months ago I decided to light things up.\nThe Problem My general workflow in mac heavily relies on finding windows, and switching between them. At a given time I usuallly have 10+ windows open. With the embedded gestures, I can just swipe 3 fingers up and search for the appropriate window.\nFor 2 or 3 windows that I use often, I use fullscreen to access them quickly by swiping left/right with 3 fingers, but more windows make it slower to find the necessary place to continue the work.\nTo make things even harder, for some reason mac rearranges the windows after every switch.\nWith dark theme everywhere, it\u0026rsquo;s pretty hard to distingush between the different applications, you have to rely on small random features.\nIt\u0026rsquo;s not fun to switch between these windows.\nUnless you set themes!\nMy most crucial triad are: Iterm2, Slack and VSCode. Chrome is top 4, but I currerntly I like its default dark theme.\nIterm2 Tab Colors In iterm2 I use vertical tab arrangement. That way more tabs can fit in the screen. The tabs can have custom colors.\nIt might not help too much in the big picture, BUT at least tabs are found easily.\nSlack Themes My main motivation is to have a bright color that can be seen from a distance.\nSlack has an option to customize its theme colors.\nSince themes are defined as a concactenated list of colors, there are many sites that hoost combinations with custom names. You can definitely find one that suits your needs.\nI really like the default CMYK theme\n#20252C,#0E0B01,#6BC9FF,#0E0B01,#0E0B01,#FCEBF9,#FCE54D,#CD2553,#D53C9F,#0E0B01 VSCode Theme Customization VSCode is my main IDE, generally 4+ instances are open at a given time. I figured that theme customization let me distingush between them. By recoloring the sidebar, I was finally able to mark the projects I needed the most.\n{ \u0026#34;activityBar.background\u0026#34;: \u0026#34;#62bfda\u0026#34;, \u0026#34;activityBar.foreground\u0026#34;: \u0026#34;#15202b\u0026#34;, } Peacock Peacock helps to automatize this flow.\nI only want it to recolor the sidebar, luckily there are settings to disable recoloring the other parts. I added these settings globally.\n{ \u0026#34;peacock.affectAccentBorders\u0026#34;: false, \u0026#34;peacock.affectStatusBar\u0026#34;: false, \u0026#34;peacock.affectTitleBar\u0026#34;: false, } It\u0026rsquo;s pretty powerful tool, but my favorite part is that I can just ask it for a random harmonic colorset.\nIt writes to the settings file, and since it modifies the embedded theme settings, it can work for colleagues that do not have this extension.\nFinal thoughts There is a saying, that if you mark everything, it\u0026rsquo;s as efficient as not marking anything. But I think this is not the case. I like to think of these tweaks as multiple colorful bookmarks in a huge textbook.\nI achieved my goal, I significantly reduced the time I need to look for small details, I can spot the colors easily and navigate to the desired app.\n","permalink":"http://budavariam.github.io/posts/2021/01/27/light-up-my-mission-control/","summary":"\u003cp\u003eI\u0026rsquo;m currently following the trends with my dev setup.\nI use dark theme in almost all of my tools.\nThat make my \u003ca href=\"https://en.wikipedia.org/wiki/Mission_Control_(macOS)\"\u003eMission Control\u003c/a\u003e a monochrome mess.\nMost of my tools have theming options, so a few months ago I decided to light things up.\u003c/p\u003e","title":"Light Up My Mission Control"},{"content":"Have you ever typed ctrl-c instead of ctrl-v and had to recopy again? Have you ever needed to copy and paste multiple entries at once from a page causing you to switch back and forth? Have you ever needed to copy the output of a program running in the terminal? I did, and got fed up with them almost 5 years ago, I\u0026rsquo;ll show you how you can eliminate these problems.\nClipboard History Most of my clipboard-related frustration came from the fact, that default clipboards in the operating systems store only one entry at a time. If I were to access the clipboard history, most of my problems were gone. Luckily there are apps for that.\nOS Defaults The latest version of Windows 10 have a setting to make clipboard history available in the System settings under Clipboard history. It makes clipboard history available with win+V key. Not too configurable, but perfectly usable.\nOn Mac you can use a secondary clipboard with ctrl+k (copy) and ctrl+y (paste), alongside cmd+c (copy) and cmd+v (paste). You can still only have 2 separate entries at once.\nDitto I started to use Ditto to eliminate this problem. I loved that I could access my previous clips throughout the day. It had configurable shortcuts to access the last 10 entries separately. The only problem I had with it, that it only worked for windows.\nCopyQ When I started to use Ubuntu for my daily work I found CopyQ, a free open-source multiplatform clipboard manager. I use it daily ever since.\nI love that it has a configurable clipboard size, I can search through the entries, and it has a configurable shortcut to Show main window under mouse cursor that can speed up work.\nIn case I copy sensitive data, I can turn off clipboard monitoring all at once with a configurable shortcut: Toggle Clipboard Storing.\nMy only problem with it is that it sometimes tends to quit unexpectedly on mac. According to their github issues they\u0026rsquo;re working on it.\nClipboard in the command line In the command line you can take advantage of the operating system\u0026rsquo;s pipeline. Imagine copy as a utility that consumes text, and paste as one that produce text, and when you use them the clipboard changes accordingly.\nLet\u0026rsquo;s see what are the exact utilities that can be used for different systems.\nMac Mac has built-in utility commands to pbcopy and pbpaste to the clipboard.\n# copy text to clipboard by piping to `pbcopy` echo \u0026#34;Text to copy\u0026#34; | pbcopy # paste text from clipboard by piping from `pbpaste` pbpaste | less Linux On Linux that use X window manager you can use xclip. In case you switch between Mac and Linux often, you can use aliases to keep things consistent.\n# Install it with the available package manager. # Add to e.g: ~/.bash_profile to load on startup alias pbcopy=\u0026#39;xclip -selection clipboard\u0026#39; alias pbpaste=\u0026#39;xclip -selection clipboard -o\u0026#39; On linux servers that does not have window manager I did not yet see the point to investigate this further.\nWindows Windows has builtin clip.exe. Unfortunately, it can only copy TO the clipboard, can not read from it.\nIf you need access to the clipboard you need to use Get-Clipboard powershell module.\nREM copy to clipboard with clip.exe echo \u0026#34;Text to copy\u0026#34; | clip REM get data from clipboard powershell -command \u0026#34;Get-Clipboard\u0026#34; REM get data from clipboard into file powershell -command \u0026#34;Get-Clipboard\u0026#34; \u0026gt; file.txt Cygwin If for some reason you still use Cygwin, you\u0026rsquo;re in luck! It makes Windows clipboard available as /dev/clipboard.\n# copy text to clipboard by redirecting to `/dev/clipboard` echo \u0026#34;Text to copy\u0026#34; \u0026gt; /dev/clipboard # paste text from clipboard by reading from `/dev/clipboard` cat /dev/clipboard Web Browsers In web browsers you can use the modern Clipboard API to interact with the clipboard. Previously you could use document.execCommand() but it\u0026rsquo;s obsolete, that means it might still work, but it\u0026rsquo;s discouraged.\nFor browser support see clipboard at caniuse.com.\nFor up to date and extensive examples see these pages sbove.\nChrome DevTools In Chrome developer Console you can use copy(object) builtin function to put an object to the clipboard.\nIt can be handy during debugging. Combined with $0 you can copy whole dom elements quickly.\ncopy($0) copy($0.value) copy(window.myGlobalObject) Happy coding!\n","permalink":"http://budavariam.github.io/posts/2021/01/20/clipboard-goodies-for-productivity/","summary":"\u003cp\u003eHave you ever typed ctrl-c instead of ctrl-v and had to recopy again?\nHave you ever needed to copy and paste multiple entries at once from a page causing you to switch back and forth?\nHave you ever needed to copy the output of a program running in the terminal?\nI did, and got fed up with them almost 5 years ago, I\u0026rsquo;ll show you how you can eliminate these problems.\u003c/p\u003e","title":"Clipboard Goodies For Productivity"},{"content":"From time to time I come across a rant on Twitter, that regular expressions are confusing and hard in general. I think if you know the basic building blocks of it, you\u0026rsquo;ll see how useful they are, and you can unleash its power in your daily coding life.\nYou do not have to know everything about them to be productive with them.\nWhat are regular expressions To put it simply, a regular expression (regex, regexp) is a sequence of characters that defines a pattern, that can be used on other strings to see whether they match the pattern or not.\nIt has roots in formal language theory.\nYou can imagine a regular expression as a machine, that checks whether the input string corresponds to its precoded rules or not.\nBase building blocks    Char Description     [characters] Matches any character in characters (can be an interval)   [^characters] Negation: Matches any character that is not in characters   | Matches any one element separated by the pipe (|) character   . Match any 1 character (except linebreaks)   ? Matches the previous element zero or one time   * Matches the previous element zero or more times (greedy, it matches as much as it possibly can)   + Matches the previous element one or more times (greedy)   () Creates a capture group, that can be extracted, or checked for repeating, assigns a number for it starting from 1   ^ Marks the start of the line   $ Marks the end of the line    You can build many patterns out of these simple building blocks. Here are a few examples.\n [a-zA-Z]+ matches any word that consists of upper or lowercase letters of the English alphabet [0-9]+ matches any character string that constist of only numeric characters th[ae]n matches than OR then winter|spring|summer|autumn matches one of 4 seasons ^line$ matches a line that only contains the text line [^02-9][8-9][1-4][0-9] matches numbers between 1810-1840 OR 1910-1940 (key)?board matches keyboard OR board (https?|ftp):// matches http://, https://, ftp://  It\u0026rsquo;s not always reasonable to write down all possible matches, but it\u0026rsquo;s always a good idea to keep the possibilities in mind.\n a+(bb|dd)*c?$ matches text that follows the pattern: at least 1 a followed by 0 or more occurrances of bb or dd and an optional c at the end  Advice to read regexp In order to understand what can a certain regular expression match, you need to follow these simple rules:\n Read it from left to right Do not skip any characters If you encounter unknown syntax, read the appropriate docs, or use a tool like regex101  Tip: Syntax highlight and bracket matching usually helps to understand complex expressions.\nAdvice to write regexp  Keep it simple Make sure it\u0026rsquo;s readable for others. I like to comment my intentions, in case the expression seems confusing Use . sparingly Try to keep greedy patterns to the minimum, for performance (see ReDoS)  Some \u0026ldquo;advanced\u0026rdquo; concepts I like to use  Word boundaries: \\b allows you to perform a \u0026ldquo;whole words only\u0026rdquo; search with e.g: \\bword\\b Shorthand character classes  Whitespace: \\s Word: \\w stands for [A-Za-z0-9_] Digit: \\d stands for [0-9] Negated forms: \\S, \\W, \\D   Backreference: match the same text as the marked capture group Non-capturing groups: (?:) do not store the result of the group  (?:19)?(9[0-9]) matches numbers 1990-1999 OR 90-99, but captures only the second group   Non-greedy matches (*?, +?) try to keep the match to the bare minimum so that the remaining part matches Exact number of matches  {n}: Matches the previous element exactly n times {n,}: Matches the previous element at least n times {n, m}: Matches the previous element at least n times and at most m times    Good to know about:\n Lookahead/Lookbehind assertions Named groups  Where can we use them Nowadays they can be used almost anywhere where there\u0026rsquo;s an option to process/match text.\nMost modern text editors have an opt-in option to use regular expressions in search. The best part is that they usually support replace patterns with regular expressions. That means that, you can use capturing groups in the replacement part.\nUNIX/Linux utilities like sed, (e)grep, find.\nProgramming languages generally support regular expressions.\nFor finding text in codebases via command line I often use ack-grep or its speed optimized competitor ag.\nDifferent programs can use different regular expression parsing engines, they can differ in what functionalities are available or what syntax do they use. It\u0026rsquo;s always reasonable to check the appropriate docs when writing complex expressions.\nSites I recommend  In my opinion, the best way to understand and debug your regular expressions is regex101 regular-expressions.info is a comprehensive colorful tutorial on regular expressions Regexcrosswords is a mindboggling brainteaser, where you can practice your newfound knowledge  Happy Coding!\n","permalink":"http://budavariam.github.io/posts/2021/01/18/regular-expressions-are-awesome/","summary":"\u003cp\u003eFrom time to time I come across a rant on Twitter, that regular expressions are\nconfusing and hard in general. I think if you know the basic building blocks of it,\nyou\u0026rsquo;ll see how useful they are, and you can unleash its power in your daily coding life.\u003c/p\u003e","title":"Regular Expressions Are Awesome"},{"content":"I work with some projects that can be only used with specific versions of node/python and it\u0026rsquo;s not feasible to simply dockerize them. Every time I switch between these projects I\u0026rsquo;d need to reinstall different versions of node/python. That would be plain silly\u0026hellip; BUT there\u0026rsquo;s a better way.\nNode.js For Node, there\u0026rsquo;s an npm package called n.\n Install any version of node Run npm install -g n Verify install: n --help  Options I use the most:\n Install specific version: n \u0026lt;version\u0026gt;  e.g.: n 15.5.1   Select version from installed: n Install and use latest node version: n latest Clean up all versions except the current: n prune  In case it does not work without sudo you can follow the advice in the docs:\n To avoid requiring sudo for n and npm global installs, it is suggested you either install to your home directory using N_PREFIX, or take ownership of the system directories\n Note: It\u0026rsquo;s not supported on windows.\nPython For Python, there\u0026rsquo;s a community made package manager solution called pyenv. It uses shell scripts and builds the selected python environment from source.\n Install any version of python Follow the instructions at its README  Options I use the most:\n Install specific python version: pyenv install \u0026lt;version\u0026gt;  e.g: pyenv install 3.9.0   Use specific python version only for the current folder structure: pyenv local \u0026lt;version\u0026gt;  I hope it\u0026rsquo;ll help you as much as it helped me.\nNote: It has a fork for windows.\nHappy Coding!\n","permalink":"http://budavariam.github.io/posts/2021/01/11/node/python-version-management/","summary":"\u003cp\u003eI work with some projects that can be only used with specific versions of node/python and it\u0026rsquo;s not feasible to simply dockerize them.\nEvery time I switch between these projects I\u0026rsquo;d need to reinstall different versions of node/python.\nThat would be plain silly\u0026hellip; BUT there\u0026rsquo;s a better way.\u003c/p\u003e","title":"Node/Python Version Management"},{"content":"After experiencing the awesomeness of External Calls in Snowflake I decided to look into the possibilities of running external snippets from Postgres.\nI did not need to search too much to find out that it supports external calls to other languages beside SQL and C, called Procedural Languages.\nOut of the documented languages I choose Python to experiment with.\nCreate a docker image with Python and the extension You must install python3 and plpython3 explicitly. The rest is not mandatory, it would be inherited from the original image.\nFROMpostgres:12RUN apt-get updateRUN apt-get -y install python3 python3-pip postgresql-plpython3-12RUN apt-get clean \u0026amp;\u0026amp; \\  rm -rf /var/cache/apt/* /var/lib/apt/lists/*ENTRYPOINT [\u0026#34;/docker-entrypoint.sh\u0026#34;]EXPOSE5432CMD [\u0026#34;postgres\u0026#34;]Note about python3 version The postgres image is based on a slim debian image. In case you need a specfic version combination, or a shiny new python version you might have a hard time.\nIf the docker postgres image starts from a debian version that do not officially support the necessary python version, you need to figure out a suitable way to get it done.\nOne way is to build python from its source code, and to make sure that it is really used by plpython3u.\nAnother way would be to start from an os image (like a newer debian) and install postgres and python as well. And make sure that your code does all the things that the base postgres image would do, to achieve better compatibility.\nSome of the current latest version combnations:\n postgres:11 (stretch) installs python3.5.3 postfres:12 (buster) installs python3.7.3 postgres:13 (buster) installs python3.7.3  Create a stored procedure in Python Before you can start to work on your python code you need to enable the python language extension by running the following code once.\n-- need to call it once CREATE EXTENSION plpython3u; If the environment is ready you can create your python code wrapped in a stored procedure. Official docs.\n-- DROP FUNCTION hello_world; -- define incoming parameters with type CREATE FUNCTION hello_world (how text) RETURNS table ( -- return row definition  index integer, greeting text ) AS $$ -- add any python code here  for index, who in enumerate([ \u0026#34;World\u0026#34;, \u0026#34;PostgreSQL\u0026#34;, \u0026#34;PL/Python\u0026#34; ]): yield ( index, f\u0026#34;{how} {who}!\u0026#34; ) -- end of python code $$ LANGUAGE plpython3u; Use custom python libraries You can import python libraries in your code as well. In case you use it in an orchestrated environment e.g: kubernetes, you\u0026rsquo;ll need to make sure that the install directory is persisted.\nYou can install them manually inside the docker image (docker exec), or ship the docker image with the libs preinstalled (RUN pip3 install mylib). It depends on your constraints of what might be a better option.\nManual install The database does not need to be stopped, though the defined function won\u0026rsquo;t be available while you switch the two lib versions.\nIt might be the better choice while you need quick iterations, or you just like to get your hands dirty or you develop a custom lib just to use its code from postgres.\nShipped install You need to specify the lib version in the docker image, run pip install -r requirements.txt and ship a new version.\nIt might be the better choice if your database don\u0026rsquo;t have internet access, or you need to specifically keep track of the different version combinations.\nCall the stored procedure You can call the stored procedure in the from clause.\nselect * from hello_world(\u0026#39;Hello\u0026#39;); -- index | greeting -- -------+------------------- -- 0 | Hello World! -- 1 | Hello PostgreSQL! -- 2 | Hello PL/Python!  select greeting from hello_world(\u0026#39;Goodbye\u0026#39;); -- greeting -- --------------------- -- Goodbye World! -- Goodbye PostgreSQL! -- Goodbye PL/Python! Access the database In case you need to get/set data in database you can connect to it from python code with the plpy module.\nCREATE FUNCTION try_adding_joe() RETURNS text AS $$ try: plpy.execute(\u0026#34;INSERT INTO users(username) VALUES (\u0026#39;joe\u0026#39;)\u0026#34;) except plpy.SPIError: return \u0026#34;something went wrong\u0026#34; else: return \u0026#34;Joe added\u0026#34; $$ LANGUAGE plpython3u; For more info see the official docs.\nBeware, it\u0026rsquo;s untrusted Before you rush to use it in your production app, I advise you, to evaluate the security risks it can add to your database.\nYou might\u0026rsquo;ve noticed the u at the end of plpython3u. Its meaning is defined in the official docs:\n PL/Python is only available as an \u0026ldquo;untrusted\u0026rdquo; language, meaning it does not offer any way of restricting what users can do in it and is therefore named plpythonu. \u0026hellip; The writer of a function in untrusted PL/Python must take care that the function cannot be used to do anything unwanted, since it will be able to do anything that could be done by a user logged in as the database administrator. Only superusers can create functions in untrusted languages such as plpythonu.\n Happy Coding!\n","permalink":"http://budavariam.github.io/posts/2021/01/05/postgres-external-python-call/","summary":"\u003cp\u003eAfter \u003ca href=\"/posts/2020/12/30/external-function-from-snowflake/\"\u003eexperiencing the awesomeness\u003c/a\u003e\nof External Calls in Snowflake\nI decided to look into the possibilities of running external snippets from Postgres.\u003c/p\u003e","title":"Postgres External Python Call"},{"content":"A few months ago at work, I wrote a simple node.js snippet to calculate route distances in Mapbox. Now I\u0026rsquo;m proud, that it\u0026rsquo;s used to demonstrate how to use Mapbox calculations from Snowflake.\nTamas Foldi handled the infrastructure, and wrote a blog post to the official Snowflake blog on how to call an external lambda from SQL.\nThe source code is available on github.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2020/12/30/external-function-calls-from-snowflake/","summary":"\u003cp\u003eA few months ago at work, I wrote a simple node.js snippet to calculate route distances in \u003ca href=\"https://docs.mapbox.com/api/navigation/#directions\"\u003eMapbox\u003c/a\u003e.\nNow I\u0026rsquo;m proud, that it\u0026rsquo;s used to demonstrate how to use Mapbox calculations from \u003ca href=\"https://www.snowflake.com/\"\u003eSnowflake\u003c/a\u003e.\u003c/p\u003e","title":"External Function Calls From Snowflake"},{"content":"Ever since I wrote about VSCode Reveal, I wanted to have a command-line interface to generate the same output. I loved that well-configured behavior and did not want to start from scratch. Finally, I had the time to do it.\nGetting started The revealjs-cli npm package is available here.\nThe Github repo is available here.\nInstall\nnpm install revealjs-cli Create a markdown file for the slideshow.\nAccess info about the available features via --help flag.\nExport slides Run the tool with params to export\nrevealjs-cli \\  --build \\  --location ./slides-dist \\  --open ./path/to/markdown/slideshow.md  NOTE: It removes the folder that the location is set to. It asks for permission before that happens. You can bypass it with --yes flag, for CI-friendly behavior.\n Export PDF You can create a pdf with the browser\u0026rsquo;s print feature.\nIt can be forced with ?print-pdf-now queryparam at the end of the url.\nServe Slides If you specify --serve flag, or a port to serve on with --port, then the server will not shut down, and it can be accessed from e.g. a browser.\nHappy sliding!\n","permalink":"http://budavariam.github.io/posts/2020/12/17/reveal.js-cli/","summary":"\u003cp\u003eEver since I wrote about \u003ca href=\"/posts/2020/06/01/markdown-slideshow/\"\u003eVSCode Reveal\u003c/a\u003e,\nI wanted to have a command-line interface to generate the same output.\nI loved that well-configured behavior and did not want to start from scratch. Finally, I had the time to do it.\u003c/p\u003e","title":"Reveal.js CLI"},{"content":"Sometimes I work on similar projects that need so little customization I feel like I can just copy and paste it, and tweak some variables, then create a new repo for it, and start to generate the content. Here is where project templates come into play.\nCookiecutter is a python tool that lets you create an initial template that you can use for later projects. Just because it is written in python it does not mean it can only scaffold python projects.\nGetting started The theory is dead simple.\n You create a folder for your templates. In each template mark the text substitution points in your file content, file names or directory names. with {{cookiecutter.CUSTOM_VARIABLE_NAME}}. Specify the variables that cookiecutter needs to look for in cookiecutter.json file for each project. Profit  I recommend that you follow the official docs instructions, because my article can become outdated.\nThe awesome part is that you can even use a github repo to start out from.\nMy experience with it I first encountered with this tool when I worked on a custom plotly-dash react component.\nIn order to get started with that, I only needed to execute cookiecutter https://github.com/plotly/dash-component-boilerplate.git, answer a few questions about the projects and I was ready to go with a working personalized template. I was amazed by this simplicity.\nI usually present my advent of code solutions in the same style over the course of a year. This year I decided to create a project template for the solutions, and it works great.\nI use the python API interface to have some custom behavior and start it out from this python script.\nDisclaimer I was not asked to create this post, and did not get anything for it, I just wanted to share how simple it is to use and some of my experience with it.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2020/12/13/project-template-with-cookiecutter/","summary":"\u003cp\u003eSometimes I work on similar projects that need so little customization\nI feel like I can just copy and paste it, and tweak some variables,\nthen create a new repo for it, and start to generate the content.\nHere is where project templates come into play.\u003c/p\u003e","title":"Project Template With Cookiecutter"},{"content":"It\u0026rsquo;s the time of the year when many people start to countdown with their advent calendars. For coders, there is a special kind of calendar that keeps us busy and help us prepare for the celebration.\nAdvent of Code presents a free challenge every day until December 25th. Each year there is a different back story. Usually, YOU are the coder hero and you need to save Christmas.\nYou do not have to have a CS background to participate, the challenges are solvable without extensive math/programming knowledge.\nHow it works The main goal is to collect 50 stars. You get stars by solving the daily challenges. The challenges are personalized, every registered user gets a unique generated input for the underlying problem. The problems are separated into two parts. The second part becomes available when you submit your successful solution.\nYou do not need to solve the problems in the actual day. On your personal stats page you can see how long after the opening did you solve the challenge for the actual day. The challenges open at midnight EST/UTC-5.\nThe two parts use the same input but require a different solution. From the site itself, you can not know in advance what will be the question to the second part. For this reason, it\u0026rsquo;s usually hard to give a solution to the first part, that can be simply reused in the second part, you usually need to do some restructuring.\nYou get a smaller input to test out your solution before submitting. And there is an explanation for that input to clear ambiguities.\nEach day has a hidden easter egg, some funny words or references, that are made visible at the end of the journey.\nCommunity They have a community forum on reddit at r/adventofcode. There you can ask for hints/help, post your solution to the solutions megathread, or post fun crafts that you made with the data or during the solution.\nMy experience with it It has been around since 2015, I first encountered it in university in the exam season, it helped me keep my mind sharp and let loose from the stress of the final exams. I did not have too much time to take it seriously, but it was a fun thing that I kept following every year since then.\nIt helped me strengthen my python knowledge and get to know it better. Helped me to practice Typescript when I first had to learn it for my work. Also, I used it to practice golang when I started with it.\nI post all my solutions into my advent_of_code github repo.\nDisclaimer I was not asked to create this post, and did not get anything for it, I just wanted to share how awesome it is and some of my experience with it.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2020/12/01/advent-of-code/","summary":"\u003cp\u003eIt\u0026rsquo;s the time of the year when many people start to countdown with their advent calendars.\nFor coders, there is a special kind of calendar\nthat keeps us busy and help us prepare for the celebration.\u003c/p\u003e","title":"Advent Of Code"},{"content":"A few days ago I read a question in twitter, what is the thing that you wish you had known when you started to code.\nI started to learn programming in high school, we tackled the basics of the field, by learning sql, networks, logic, binary calculations, imperative programming, but we did not really learn how these are going to work in real life.\nI collected some concepts that work for me now during my day-to-day coding, that I did not use much when I started out.\n Interpreters can help with quick calculations Sandboxes are great to investigate problems in isolation Read as much code as you can Debugger is usually easy to set up, and really useful Learning new programming languages comes easier with each new language Terminal can be simpler than GUI Typing is crucial Write documentation what you\u0026rsquo;d like to read Other advices I find helpful  Interpreters can help with quick calculations For scripting languages like python, bash, javascript, I find it beneficial to have a separate tab for a REPL environment.\nIt\u0026rsquo;s comforting to have a mini sandbox to try out small snippets on the go without the need to run/restart the complex app that I develop.\nSandboxes are great to investigate problems in isolation In order to solve problems it\u0026rsquo;s a good tactic to isolate the issue, and try to solve the actual problem.\nFor web projects I love online sandboxes, some of them have base templates and let me choose the frameworks that I want to include.\nI can share them with my colleagues and we can experiment in them together independently.\n CodePen CodeSandbox Repl.it  Read as much code as you can Some of my university teachers told us, that it is good practice to read open-source library codes and try to familiarize ourselves with them.\nI occasionally need to use libraries for special cases that are not documented, this advice really come in handy. It empowered me to get my hands dirty and look into the source to figure out what happens under the hood.\nIn lucky cases they have tests for these issues, and can easily see how they should be used, if that\u0026rsquo;s not the case, the code still holds the truth of what they\u0026rsquo;re capable of.\nI like to read merge requests of my colleagues, and familiarize myself with the changes they made\nDebugger is usually easy to set up, and really useful For me it was scary at first, I did not get a tutorial on how these things work.\nIt\u0026rsquo;s pretty simple, mark the points where you\u0026rsquo;d like to stop code execution, start the code in debug mode, and make the code reach that point. From there you can inspect the variables, step forward, step into function calls, continue execution, and many more depending on the language and IDE.\nThe simple debugging tactic is to log every variable that needs to be inspected, but it can be hard to determine what variable do you actually need.\nUsually when I have to write vanilla javascript code, my main problem is that I can not always be sure what properties are available at a certain point for the available objects. Debugger makes it easy to see the possible options. Otherwise I\u0026rsquo;d need to guess what I need to log to the console, but this way I can just freeze time and look around.\nChrome devtools has a great intro article, if you want to learn more about debugging in Javascript\nLearning new programming languages comes easier with each new language Programming languages have the same basic principles based on their paradigm. If you need to learn a new object oriented language you don\u0026rsquo;t need to relearn the concept, just understand the differences in the syntax and the possibilities.\nWhen you learn a new language you don\u0026rsquo;t have to know everything about it at first, learn what\u0026rsquo;s enough and if you need to use advanced approaches you can find the answers to your questions later on. The important thing is to practice.\nI found it useful to have a script language that I know very well. If I can quickly solve simple problems with it, it can boost productivity in my daily coding routine.\nYou can write mini disposable code to achive a one-time simple task, that you\u0026rsquo;d otherwise have to type out. For example if you need to type the same pattern over and over, it\u0026rsquo;s frustrating to figure out in the middle, that the pattern should be different. Generated code can save you from this nightmare.\nProgramming challange sites helped me achive learning new languages better by presenting problems in an isolated state. They do not require you to handle all errors and write production ready code, but still great for practice. They make you able to focus on the way it has to be calculated.\nMy favourite programming challenge sites:\n CodeSignal HackerRank SPOJ  Terminal can be simpler than GUI If an application comes with a terminal, or command interpreter, it\u0026rsquo;s worth it to learn to use what it\u0026rsquo;s capable of. Most of the time it involves less clicking and mouse movement to achieve the same thing, or even do many more options.\nMy favourite examples are Excel and AutoCAD.\nIn Excel you can select the commands from a form and add each parameter for a function. But when it comes to nesting those params, you\u0026rsquo;ll end up with juggling many windows. At least it was the case in version 2003, I haven\u0026rsquo;t really used new versions since then, but this experience stuck. You have the option to write a formula, that\u0026rsquo;s simpler, and the help menu and the next property hovers over the cursor anyways. The only thing you need to be aware of, not to make any syntax errors. I recall one time I needed a specific drawing command option, but it was not available as a button. TODO: look for it.\nMy favorite IDE is curretly VSCode, I always keep the terminal open in the bottom. I can pipe together operations that would be impossible to do in the GUI of the operating system.\nTyping is crucial I learned to code in Hungarian keyboard layout, and it\u0026rsquo;s not the most coding friendly layout. In mac it\u0026rsquo;s even worse, the special characters are spread across the keyboard with cryptic shortcuts, in order to have all accented keys easily reachable.\nIt might not be news for you, but I figured that English layout is much more convenient. It has all the special characters I need at most one SHIFT key away.\nI learned touch typing by myself, when I realized that my typing speed could be enhanced. There are some great sites and applications for that, there are even sites that let you practice writing code.\nThe best advice that helped for me is that you should not look at your hand when you\u0026rsquo;re typing.\nSome of my colleagues take it one step further, and do not really use their mouse at all. They edit code with modal editors like vim, or VSCode vim extension, and use tiling window managers.\nMy favourite learning materials were:\n gtypist: practice in the terminal offline Typing Study: helped me to learn the basics Typing Club: great stories Typing.io: practice typing code  Write documentation what you\u0026rsquo;d like to read In my first few months of coding at a company was a totally new experience unlike anything. I had to familiarize myself with many things all at once. I found myself asking the same questions all over again. One day I saw a colleague taking notes in a Word document. I realized it can save me a lot of time, and I can process the new information while I write them down.\nI started out with simple txt files, later I changed to markdown, to get familiar with it.\nNowadays I find it useful to write README files for each project I\u0026rsquo;m working on, to make it easier for others to get started.\nMost importantly the docs I write help me get restarted, when I need to work on the projects again after a long time (more than 2 weeks).\nThe processes might seem logical at the time of writing, but a few projects and many new experiences/trends later it might not behave as what you\u0026rsquo;d expect them to be.\nIt takes effort to keep the docs up to date, but if you handle them as the main source of truth, it\u0026rsquo;s going to worth it.\nOther advices I find helpful  It\u0026rsquo;s an underrated and invaluable skill to be able to search for the right terms about a problem you face, to find the documentation, discussions in the internet, articles about it, open or long closed github issues. Be curious, find the reasons, of why things misbehave, don\u0026rsquo;t be satisfied with quick patches that seem to fix the issues Instead of inline parameters use variables with a clear names about it\u0026rsquo;s intention Clean after yourself, leave the code cleaner than you found it, code will be read more than written. (Clean code, boy scout rule) Read through your changes before you submit a merge request, to avoid the mistakes that can be easily spotted Linters are good to keep a consistent style, and save you from common mistakes Pragmatic programmer principles DRY KISS 12 factor app UX rules Practice practice, practice  \u0026hellip;\nHappz coding$\n","permalink":"http://budavariam.github.io/posts/2020/09/19/things-i-wish-i-had-known-as-a-junior/","summary":"\u003cp\u003eA few days ago I read a question in twitter, what is the thing that you wish you had known when you started to code.\u003c/p\u003e","title":"Things I Wish I Had Known As a Junior"},{"content":"When I develop new web components I find it frustrating that I have to run the app, click it through until the point I find my new visual, just to see how it behaves in a real life situation. Unit tests are great to check whether my component does what I intended, but styling is a whole different story. I\u0026rsquo;ve been looking for a component preview library for React, that is not invasive and I do not need to change my code with extra markup to make it work, Storybook does exactly what I was looking for.\nWhat is this They summarized what their library is about in their introduction page.\n Storybook is a user interface development environment and playground for UI components. The tool enables developers to create components independently and showcase components interactively in an isolated development environment.\nStorybook runs outside of the main app so users can develop UI components in isolation without worrying about app specific dependencies and requirements.\n I heard about this library first in the Ladybug Podcast episode 13 Design systems. I did not look into it then, but when I needed to create a showcase of some of my components I decided to give it a try.\nNext time I had to create a totally new component, I enjoyed the benefits of the focused development, and not having to run the whole app.\nYou can get started easily for multiple frameworks.\nMy code organizing experience I do not want to get into how to get started they have many good tutorial paths depending on what you want to use it for.\nI got started with npx -p @storybook/cli sb init --type react_scripts, this boilerplate code uses number prefixed stories, and put everything into one stories folder.\nFor my use case I found it better to name the story files the same as the component and put it next to them.\nThis script adds the necessary dependencies, and adds storybook related code as devDependencies. It takes some time to get it all together, and I usually don\u0026rsquo;t need these in my CI pipelines, so I moved these to optionslDependencies, and call npm install with --no-optional flag.\nOne entrypoint rules them all I created a index.storybook.js file, to import all the necessary things that my stories need, so they can behave consistently. This file need to be imported into every .stories.js file, and it will take care of the common logic.\nIf I want to mimic the look and feel of my app I need to include the same styles that my app uses. To avoid any potential issues I prefer to import them in the same order, to avoid misbehaving style overrides due to ordering differences.\nAlso I need to include any other dependencies that my components might need, e.g i18n, so the components' behaviour can stay the same.\nIn order to showcase my components I provided some mock data to use throughout the components. These are not used anywhere in the real app. I do not want to repeat them many times, this entrypoint can contain them, or reexport them from their separate location.\nDecorators for repeated logic In react data for a component can come from props, context.\nFor a component that needs a provider to work, you need to return your component wrapped in that provider. If that provider is used by many of your components your stories will have many repeated wrapped code. This is where decorators come in handy\nSimple provider The decorator can wrap around the component and it won\u0026rsquo;t need to repeat this code.\nexport const modalProviderDecorator = (storyFn) =\u0026gt; \u0026lt;ModalProvider\u0026gt;{storyFn()}\u0026lt;/ModalProvider\u0026gt; The only thing is that the story declaration must add the necessary decorators for the component definition. Be aware that it applies them in the specified order.\nexport default { title: \u0026#34;CustomComponent\u0026#34;, component: CustomComponent, decorators: [ modalProviderDecorator, ], } React Router I did not yet needed to mock different routes, I only needed to make my components work that use location info. This small snippet made those work.\nimport { createMemoryHistory } from \u0026#34;history\u0026#34; import { Router, Route } from \u0026#34;react-router-dom\u0026#34; export const addRouter = (storyFn) =\u0026gt; ( \u0026lt;Router history={createMemoryHistory({ initialEntries: [\u0026#34;/\u0026#34;] })}\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; component={() =\u0026gt; storyFn()} /\u0026gt; \u0026lt;/Router\u0026gt; ) Custom data in Provider Your component might need to act differently if there\u0026rsquo;s something in one of its contexts. If you want to showcase this behaviour in different stories listed one by one this is a possible solution.\nThe intuitive solution would be to you create a function that creates the decorator, and call it with a parameter, but it will encapsulate that data into its clojure, and it won\u0026rsquo;t change if you rerun the code.\nBut if you simply add a global variable into the decorator you can change that variable in the given story and it will render the component with that data. This way you don\u0026rsquo;t need to repeat the context definition, you can still use the decorators.\nHere the privileges can be a global variable that changes depending on what story you render.\nconst prv = { EDIT: \u0026#34;EDIT\u0026#34;, VIEW: \u0026#34;VIEW\u0026#34; } let privileges = [] export const addPrivilegeContext = (storyFn) =\u0026gt; { return (\u0026lt;PrivilegeContext.Provider value={{ privileges }} \u0026gt;{storyFn()}\u0026lt;/PrivilegeContext.Provider \u0026gt;) } } export default { title: \u0026#39;CustomComponent\u0026#39;, component: CustomComponent, decorators: [ addPrivilegeContext, ], }; export const ComponentWithEditorPrivilege = () =\u0026gt; { privileges = [prv.EDIT] return \u0026lt;CustomComponent /\u0026gt;; } export const ComponentWithViewerPrivilege = () =\u0026gt; { privileges = [prv.VIEW] return \u0026lt;CustomComponent /\u0026gt;; }  Note: Global variables are evil. I just want to point out that it is possible this way.\n Note that this will only work if you have already loaded the storybook, and clicking through different pages, if you arrive to this page then the default value will be used that is an empty aray in this case. If this is not okay for you, you can still extract the logic to a function, and wrap your component around it without using decorators.\nKnobs for interactivity You can make your stories controlled with knobs.\nBasicly you\u0026rsquo;ll have a tab in the bottom with controls, that can set the incoming props of your component. You can see how it reacts to change, and change its input without changing the underlying code.\nAll you need to do is add withKnobs as the first decorator from \u0026quot;@storybook/addon-knobs\u0026quot;, and define the possible values and settings for each story.\nYou can have many types, e.g. number, text, array, drowdown, multiselect, and they can really supercharge your components.\nI could create a blogpost just on knobs alone, I really enjoy this feature.\nThey are pretty amazing for example to filter mocked data only for those that you\u0026rsquo;re interested in in your current usecase.\nAn other exciting use-case is that you can define a dropdown with keys, add the property value combinations into an object, and when a selction is made, the values change all at once. This way you can showcase and examine different states of the component to others saving time by not having to click through many stories, and not having to type anything to get the different states.\nDisclaimer I was not asked to create this post, and did not get anything for it, I just wanted to share how simple it is to use and some of my experience with it.\n","permalink":"http://budavariam.github.io/posts/2020/07/04/storybook/","summary":"\u003cp\u003eWhen I develop new web components I find it frustrating that I have to run the app,\nclick it through until the point I find my new visual, just to see how it behaves in a real life situation.\nUnit tests are great to check whether my component does what I intended,\nbut styling is a whole different story.\nI\u0026rsquo;ve been looking for a component preview library for React,\nthat is not invasive and I do not need to change my code with extra markup to make it work,\n\u003ca href=\"https://storybook.js.org/\"\u003eStorybook\u003c/a\u003e does exactly what I was looking for.\u003c/p\u003e","title":"Storybook"},{"content":"React Transition group is a great library for animations in react. I want to share my experience on how to have an appear animation on components that are mounted with an in={false} property.\nMy only constraint was hat I could not use unmountOnExit property.\nWhen the component mounted, it showed up immediately without the fade-in effect, then when it actually should have shown, then the animation started. I had to make sure that the component do not show up before the fade-in animation happens.\nAs stated in the docs, the in={false} setting prevents any classes applied to the component with CSSTransition.\n If the transition component mounts with in={false}, no classes are applied yet. You might be expecting *-exit-done, but if you think about it, a component cannot finish exiting if it hasn\u0026rsquo;t entered yet.\n Bummer.\nSo the first time we see the component, it won\u0026rsquo;t have any classes added to it. And later on it will only have classes that has a suffix like *.enter-done. Then how do we apply an effect to it?\nI came up with a simple solution. The classNames property can be any string, and the additional classes will be applied to the end of it. For example my-node will be transformed to my-node-enter on enter.\nI needed a way to know when the initial transition has happened.\nIf I set a string with a space in it, then technically it will apply 2 classes. It add a suffix to the last one only, and evidently the first untouched one will mark that CSSTransitionGroup has changed the classes, while giving us a class to easily check it.\n\u0026lt;CSSTransition in={falseAtFirst} key=\u0026#34;unique\u0026#34; timeout={200} classNames=\u0026#34;css-transition-applied hello-world-message\u0026#34; \u0026gt; \u0026lt;span className=\u0026#34;message\u0026#34;\u0026gt;Hello world\u0026lt;/span\u0026gt; \u0026lt;/CSSTransition\u0026gt; Then with this css I can assure that the component do not show up prematurely.\n.message:not(.css-transition-applied) { display: none; } Hope you won\u0026rsquo;t need this.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2020/06/18/react-csstransition-appear-animation-with-infalse-and-without-unmountonexit/","summary":"\u003cp\u003e\u003ca href=\"http://reactcommunity.org/react-transition-group/css-transition\"\u003eReact Transition group\u003c/a\u003e is a great library for animations in react.\nI want to share my experience on how to have an appear animation on components that are mounted with an \u003ccode\u003ein={false}\u003c/code\u003e property.\u003c/p\u003e","title":"React CSSTransition appear animation with in=false and without unmountOnExit"},{"content":"My favourite place to deploy simple hobby and experimental web applications is heroku. It has a free plan, and it\u0026rsquo;s pretty easy to get started.\nHeroku can detect the type of your application, if it is in the root of your repository, but if you need some custom options, you can define a Procfile.\nIn the free plan as of today you can have 1000 hour of free hosting on spare instances. When your application is not used, it goes to sleep mode, and stays awake for a short period of time, or until it\u0026rsquo;s used. It means that the first reach of your application might take a bit longer, and if you don\u0026rsquo;t persist your application state it can be lost.\nGet started I usually use the heroku CLI to manage my applications.\n register in heroku, create a git repo for the project, navigate to it heroku login - opens the browser and authenticates for the CLI session heroku create project-name - creates a new project, and sets a new remote called heroku for the it up for the current git repository magic happens here (create the app) git push heroku master - start the deployment heroku logs -t - shows the logs of the current heroku app  Serve create-react-app application Sometimes I just write a simpe react web application without any backend, that I just want to host somewhere for a quick demonstration.\nI haven\u0026rsquo;t found a description how to host create-react-app for this simple use case in the docs.\nThe simplest way is to put the app in the root of the repository. If heroku finds package.json in the root, it assumes that the project is a node webapp. At deployment it will install both dependencies and devDependencies, build the application with npm run build, remove devDependencies, then start the application with npm start.\nAfter create-react-app prod build, it shows a way to serve the application with serve. I added it as the start script in package.json, and build the app with react-scripts build.\nFor local development I kept react-scripts start as npm run cra-start.\nSome gotchas  Heroku needs a README.md in the root, otherwise it won\u0026rsquo;t deploy. In order to install the proper dependencies, package-lock.json or yarn.lock file must be pushed to the repo. The engines property can set the necessary npm and node versions. The port that the app needs to listen to is set in $PORT environment variable.  Sample package.json { \u0026#34;name\u0026#34;: \u0026#34;create-react-app\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;react\u0026#34;: \u0026#34;^16.13.1\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^16.13.1\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;3.4.1\u0026#34;, \u0026#34;serve\u0026#34;: \u0026#34;^11.3.1\u0026#34; }, \u0026#34;engines\u0026#34;: { \u0026#34;npm\u0026#34;: \u0026#34;6.11.3\u0026#34;, \u0026#34;node\u0026#34;: \u0026#34;10.17.0\u0026#34; }, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;serve -s build\u0026#34;, \u0026#34;cra-start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: \u0026#34;react-app\u0026#34; }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] } } Serve untracked non-generated files I had a quick and small project where I couldn\u0026rsquo;t generate the static pages with a script, but I did not want to host the generated files in the repository.\nI used a script to collect the data on every deploy, and push it to heroku. I wanted it to be simple, and reproducible in a new machine, without any manual steps.\nDeploy script I put the necessary files (package.json, package-lock.json, README.md) for heroku root into heroku-deploy folder.\nFor the sake of the example I collected the static files into untracked-files/export.\n#!/bin/bash  echo \u0026#34;- Clean dist folder\u0026#34; # Make sure that dist-folder does not exist rm -rf ./dist-folder echo \u0026#34;- Create dist branch\u0026#34; git checkout --orphan dist git reset --hard git clean -fd -e untracked-files/export git commit --allow-empty -m \u0026#34;Create Empty Dist Branch\u0026#34; git checkout master echo \u0026#34;- Add files and push new version\u0026#34; git worktree add -f dist-folder dist cp -r ./untracked-files/export/* dist-folder/ cp -r ./heroku-deploy/* dist-folder/ cd dist-folder || exit 1 git add . git commit -m \u0026#39;Deploy to Heroku\u0026#39; git push --force heroku dist:master # force push is needed, because a # new local branch is created on every deploy. cd .. echo \u0026#34;- Cleanup\u0026#34; git worktree remove dist-folder git branch -D dist echo \u0026#34;- Done\u0026#34; Git commands to create a new empty parentless branch git checkout --orphan dist git reset --hard git clean -fd -e untracked-files/export git commit --allow-empty -m \u0026#34;Create Empty Dist Branch\u0026#34; git checkout master In order to create a new branch that does not have anything inside git checkout --orphan dist is a good start, it creates a new orphaned branch called dist.\nAfter this script runs, we are taken to this new branch, and every file in the work tree is in staged state.\nSome say that rm -rf . is a good next step, but for me it seems a bit dangerous.\nI sticked with git reset --hard; git clean -fd -e untracked-files/export. It unstages all the files, remove the modified files, then clean all untracked files, except the ones in the excluded (-e) directories.\nTo create a branch I added a new empty commit, and headed back to the main branch.\nGit worktree Git worktree is a way to manage multiple branches in the same repository.\nTo put it simple, it creates a folder, and when you step into that folder, git acts like you\u0026rsquo;ve checked out that branch.\ngit worktree add -f dist-folder dist cp -r anything/* dist-folder cd dist-folder # now git thinks we\u0026#39;ve checked out `dist` git add . git commit -m \u0026#39;Deploy to Heroku\u0026#39; git push --force heroku dist:master cd .. # back in master git worktree remove dist-folder For my usecase it\u0026rsquo;s perfect, I have an empty dist branch at this point,\n I check it out into a folder called dist-folder copy the necessary files step into the worktree, so it seems like I\u0026rsquo;ve checked out dist Stage the files, commit and deploy. step out, so git thinks I\u0026rsquo;m in master, and I can safely remove dist-folder.  Since I create a new branch on every deploy, I overwrite the contents of master branch in heroku remote. Since pushes to that branch is only to trigger deployment, I never check it out, I don\u0026rsquo;t yet see a problem with this approach.\nDisclaimer I was not asked to create this post, and did not get anything for it, I just wanted to share how simple it is to use and some of my experience with it.\n","permalink":"http://budavariam.github.io/posts/2020/06/14/heroku/","summary":"\u003cp\u003eMy favourite place to deploy simple hobby and experimental web applications\nis \u003ca href=\"https://www.heroku.com\"\u003eheroku\u003c/a\u003e.\nIt has a free plan, and it\u0026rsquo;s pretty easy to\n\u003ca href=\"https://devcenter.heroku.com/categories/language-support\"\u003eget started\u003c/a\u003e.\u003c/p\u003e","title":"Heroku"},{"content":"I\u0026rsquo;ve started to learn how to create Visualizations with Tableau for a few weeks now. Today I\u0026rsquo;ve submitted my solution to the recent MakeoverMonday challenge (2020 #23).\nAbout the challenge The organizers summarized it perfectly on data.world.\n Each week we post a link to a chart, and its data, and then you rework the chart. Maybe you retell the story more effectively, or find a new story in the data. We\u0026rsquo;re curious to see the different approaches you all take. Whether it’s a simple bar chart or an elaborate infographic, we encourage everyone of all skills to partake. Together we can have broader conversations about and with data.\n Before / After Original chart My reworked chart I\u0026rsquo;ve published it on Tableau Public.\nExperience The main thing I wanted to emphasize in this chart is the time frequencies. In the original chart I did not see the clear distinction between the effort of consuming non-animal related products on a daily basis, and the full lack of this effort.\nOther than that I wanted to put a clear distinction between meat-eaters and the ones that follow a specific diet.\nAlso I wanted to use the colors, size and the ordering to show the differences between the effort that the different people put in. I set a color range from green to red. In my opinion red is a better color to show that someone Never consumes specifically meat-free/animal-free products, than the green color that the original chart uses.\nI think someone that do not think about this might eat more of these products than someone, who loves meat and wouldn\u0026rsquo;t change it for any other substitution, so I put the never label on top, making it the smallest.\nI did not like in the original image that the axis went over 100% without meaningful data. I let my bottom chart run to 100% to prevent unintentional axis changes.\nWhen I did this challenge, I set myself a max 1.5 hour timeframe, so I did not have time to polish it until perfection. There are some things I miss, like bigger font on the barcharts, clearer font colors, explanation of size.\nMy favourite part is that on hovering any of the top bars, a plain english sentence tells me what I need to see, and the chart on the bottom updates with the appropriate data.\nThe overall result is a bit redundant, the reason behind that is that I wanted to take some time to practice some Tableau features.\nAll in all it was a nice experience putting my newfound knowledge in use.\n","permalink":"http://budavariam.github.io/posts/2020/06/08/first-makeovermonday-submission/","summary":"\u003cp\u003eI\u0026rsquo;ve started to learn how to create Visualizations with Tableau for a few weeks now. Today I\u0026rsquo;ve submitted my solution to the recent \u003ca href=\"https://www.makeovermonday.co.uk/data/\"\u003eMakeoverMonday\u003c/a\u003e challenge (2020 #23).\u003c/p\u003e","title":"First MakeoverMonday submission"},{"content":"Today I\u0026rsquo;ve found an awesome library, called reveal.js, that lets me create slideshows in markdown format. It has a VSCode plugin, that is intuitive to use. My main purpose was to create a slideshow in plaintext format, and this lib exceeded my hopes.\nVSCode plugin The plugin adds a new item to the sidebar, that shows the outline of the opened document. In the top bar there are options to present or save the presentation.\n Save to HTML Save to PDF Open presentation in the browser Open presentation to the side  The side presentation even syncs up with the cursor and shows only the current slide.\nBasics For a basic overview of the possibilities the VSCode plugin promotes a sample file, that is available here.\nThis is the first time I met this lib, and I haven\u0026rsquo;t yet got time to dive in the docs, here are the essential parts I needed:\n  The markdown file has to start with a front-matter like this:\n--- theme: \u0026#34;night\u0026#34; transition: \u0026#34;slide\u0026#34; highlightTheme: \u0026#34;monokai\u0026#34; logoImg: \u0026#34;logo.png\u0026#34; slideNumber: false title: \u0026#34;My first markdown slide\u0026#34; ---   To scroll the slides to the right, separate the pages with ---, for bottom scroll use --.\n  Markdown syntax can be used. So I can insert an image with:\n![Alt text](./images/file-location.png)   Tables can be embedded as well.\n  I needed to get rid of image borders. I added customTheme: \u0026quot;overrides\u0026quot; to front-matter, and this css to overrides.css in the same folder as the presentation. There might be a more sophisticated way, but it was fine for me.\n.reveal section img { background: none; border: none; box-shadow: none; }   To fragment a page I need to add {.fragment} at the end of the block I want to show later.\n### Trivia  What is the answer to the Ultimate Question of Life, the Universe, and Everything? ... calculating {.fragment} ... still calculating {.fragment} 42 {.fragment}   To make sure that an image is fit to the whole screen add {.stretch} class to it\n![Alt text](./images/file-location.png) {.stretch}   Some useful shortcuts during runtime:\n To pause the presentation press . To draw in the presentation press c To show all slides and navigate easily press ESC    What I missed during this first day One thing I miss though is a simple way to build the presentation, to publish, but I\u0026rsquo;m sure I\u0026rsquo;ll figure something out when I\u0026rsquo;ll need it.\nStill it\u0026rsquo;s an amazing tool, I\u0026rsquo;m grateful for its creators.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2020/06/01/markdown-slideshow/","summary":"\u003cp\u003eToday I\u0026rsquo;ve found an awesome library, called\n\u003ca href=\"https://github.com/hakimel/reveal.js\"\u003ereveal.js\u003c/a\u003e,\nthat lets me create slideshows in markdown format.\nIt has a\n\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=evilz.vscode-reveal\"\u003eVSCode plugin\u003c/a\u003e,\nthat is intuitive to use.\nMy main purpose was to create a slideshow in plaintext format, and this lib exceeded my hopes.\u003c/p\u003e","title":"Markdown Slideshow"},{"content":"I need to set the zoom factor in an iframe. I knew exactly how much space should the embedded content fit into. And the scale needs to be adjustable. Here\u0026rsquo;s how I\u0026rsquo;d do it.\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;iframe class=\u0026#34;scaled-iframe\u0026#34; src=\u0026#34;https://example.com\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; Container The iframe has to be wrapped into a container div element, that can have any size. I set a css custom property on it, that can be changed with javascript later on.\n.container { --scale-factor: 0.5; overflow: hidden; /* props below are not mandatory */ width: 50%; height: 500px; border: 1px solid black; } The container\u0026rsquo;s width and height can be any reasonable value, the --scale-factor should be a positive number around 1 (1 is 100%, zero does not make sense).\nSince I\u0026rsquo;ll fit the iframe content to the container, I don\u0026rsquo;t need to show any possible overflows.\nIframe The main trick is that in the iframe transform: scale can change its contents' size.\nIf I set width: 100%; height: 100%; on the iframe to keep it fit into its container, the scaling will change them as well. I need to adjust the width and height of the iframe element so that it fits in its container. I can calc the necessary adjustments based on the custom property this way: calc(1/var(--scale-factor) * 100%).\n.scaled-iframe { transform: scale(var(--scale-factor)); width: calc(1/var(--scale-factor) * 100%); height: calc(1/var(--scale-factor) * 100%); } In case I don\u0026rsquo;t want to fill the whole container, and I don\u0026rsquo;t like that it\u0026rsquo;s aligned to the middle, I need to set the transform-origin property to a different value. E.g: 0 0; will start to scale it up from the top left corner.\nBrowser support As of now css variables are not supported in IE11, JS can be used instead of it.\nOpera mini stays out of this game completely.\nFor up to date info check out caniuse.com:\n calc transform css variables ","permalink":"http://budavariam.github.io/posts/2020/05/11/iframe-zoom/","summary":"\u003cp\u003eI need to set the zoom factor in an iframe.\nI knew exactly how much space should the embedded content fit into.\nAnd the scale needs to be adjustable.\nHere\u0026rsquo;s how I\u0026rsquo;d do it.\u003c/p\u003e","title":"Iframe zoom"},{"content":"The commmand line can be your best friend during development, if you take some time to get to know its capabilities. But even if you know what it can help you with, you can still extend it. I\u0026rsquo;d like to introduce you some of my favourite tools, fzf, and oh-my-zsh. By the end of this post I hope you\u0026rsquo;ll see how well they can work together with you.\noh-my-zsh I\u0026rsquo;ve always enjoyed tweaking my command line configurations, but usually when I needed a functionality, I had to sit down and understand my code again to figure out where to put the new logic.\nLast year I\u0026rsquo;ve found oh-my-zsh, and I felt relieved. It makes it easy to create an easily managable config, nice themes and it is easily pluginable. It has a nice community that creates and shares their work.\nMy favourite feature in it, other than its simplicity, is that zsh makes tab completion navigatable, so you can use the arrow keys to select the appropriate value that you were searching for.\nAn other great built-in command is fc, that opens up my editor and lets me edit the previous command and run it after save.\nZsh comes embedded with plugins for commonly used commands like git, docker and kubernetes. It empowers them with aliases, command prompt information, also extends their tab completion by helping with available field names and lets you browse resources.\nNew plugins can be installed usually with 2 lines of code, one of which is a git clone, the other is editing the plugins list in .zshrc. Their configuration usually means to set some environmental variables.\nfzf fzf is a general purpose command line fuzzy finder. It makes it easy to filter data by typing any part of the line.\nYou can pipe data into it, or filter file content from your disk.\nI like the recommended settings, that way it stands out, from the other lines.\nexport FZF_DEFAULT_OPTS=\u0026#39;--height 40% --layout=reverse --border\u0026#39; Autocomplete Many shells come with command history navigation helper shortcut ctrl+R, but in the past it usually confused me more than what it helped. I often ended up with history | less and the /. Plugins for the rescue!\nzsh-autosuggestions This plugin lets me see autosuggestions for my commands. It makes me feel super productive, when I need to use the same set of commands in a project in order to run, build or test it.\nWhen I start to type the commands, I can accept the suggestion with a simple right arrow click. If I need to search for a complex command there is a better way for that!\nfzf in zsh Fzf can be integrated with oh-my-zsh. It is super convenient to fuzzy search for previous commands with ctrl+R. It can find my previously typed command from just a few keystrokes.\nIt is also useful to insert file name from the current subtree with ctrl+T.\nEnhance zsh tab completion with fzf As I mentioned above, zsh comes with navigatable tab completion, but unfortunately the fzf plugin do not attach in every case. Not so long ago I\u0026rsquo;ve found a great plugin that lets you use fzf in every occasion.\nSometimes it might not be what you need, you have the option to toggle it temporarily with toggle-fzf-tab.\nMy zsh config For reference my zsh config is available here. The exciting partt is the plugins section. With only a few lines of code the plugins come alive.\nplugins=( fzf-tab # to turn it on and off: toggle-fzf-tab git zsh-autosuggestions # zsh-syntax-highlighting fzf docker kubectl kube-ps1 # to turn it on and off: kubeon/kubeoff )  In case it may be changed this is how it looks like at the time of writing.\n I\u0026rsquo;ve tried zsh-syntax-highlighting, but is did not really like long commands, or pasted code, so I turnded it off.\n","permalink":"http://budavariam.github.io/posts/2020/04/27/supercharge-your-command-line/","summary":"\u003cp\u003eThe commmand line can be your best friend during development, if you take some time to get to know its capabilities.\nBut even if you know what it can help you with, you can still extend it.\nI\u0026rsquo;d like to introduce you some of my favourite tools, \u003ccode\u003efzf\u003c/code\u003e, and \u003ccode\u003eoh-my-zsh\u003c/code\u003e. By the end of this post I hope you\u0026rsquo;ll see how well they can work together with you.\u003c/p\u003e","title":"Supercharge your command line"},{"content":"In my opinion Emmet is an essential tool for web developers. You can code in abbreviations that you can translate into html layouts, css styles, or even xsl transformations. These handy shortcuts make development faster, if you know what you can use by heart.\nBasics You can find the detailed basics in the official docs.\nAlso I recommend you to check out the official cheat sheet.\nI\u0026rsquo;ve been coding in VSCode, and emmet has been integrated to it for a few years now. It is enabled by default for many file types e.g: html, jsx, xml, xsl, css, scss, sass etc.\nWhen you type in an emmet statement in those file types, you can expand it with ctrl+space helper, or with the Emmet: Expand Abbreviation command.\nI list the basic building blocks below, that you can combine in any way you\u0026rsquo;d like. Just because my examples are simple it does not mean that it can not create complex layouts. (In some examples I shorten the generated code with ... to save space).\nEmmet shines when it can make you type less. In my opinion it is better to keep it simple in general, so that you won\u0026rsquo;t waste more time to create the perfect snippet, than what it would\u0026rsquo;ve taken to type it in the first place.\nTags, properties and text  Use . for class Use # for id Use [] for custom attributes Use {} to add cutom text Use lorem for lorem ipsum filler text. You can specify a number to limit the word count. e.g: lorem10.     What Emmet Generated HTML     class a.myClassName \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;myClassName\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;   id p#myId \u0026lt;p id=\u0026quot;myId\u0026quot;\u0026gt;\u0026lt;/p\u0026gt;   attributes td[title=\u0026quot;Hello world!\u0026quot; colspan=3] \u0026lt;td title=\u0026quot;Hello world!\u0026quot; colspan=\u0026quot;3\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;   custom text div{Welcome} \u0026lt;div\u0026gt;Welcome\u0026lt;/div\u0026gt;   filler text lorem5 Lorem ipsum dolor sit amet.    Movements  Use \u0026gt; to step into the previous item, and define its children. Use + to define a sibling of the previous item. Use ^ to climb up to parent. (It can be used multiple times).     What Emmet Generated HTML     move down ul\u0026gt;li\u0026gt;lorem4 \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;Lorem ipsum dolor sit.\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;   add siblings div\u0026gt;span.a+span.b+span.c \u0026lt;div\u0026gt;\u0026lt;span class=\u0026quot;a\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;b\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;c\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;   move up div\u0026gt;p\u0026gt;span+strong^^footer \u0026lt;div\u0026gt;\u0026lt;p\u0026gt;\u0026lt;span\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;    Control  Use *n for multiplication, where n is a number that defines how many times an element should be outputted Use () for grouping (e.g. it is useful to combine with multiplication) Use $ to insert an increasing number.  The number of preceding zeroes can be defined with the number of $s. You can reverse the number count direction to decrease with @-. (For me it does not seem to work now) You can change the start number with @n where n is the desired number.       What Emmet Generated HTML     Add counter ul\u0026gt;li.item$*5 \u0026lt;ul\u0026gt;\u0026lt;li class=\u0026quot;item1\u0026quot;\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li class=\u0026quot;item2\u0026quot;\u0026gt;\u0026lt;/li\u0026gt;...\u0026lt;/ul\u0026gt;   Group mulltiplication (div\u0026gt;label+input[type=radio])*2 \u0026lt;div\u0026gt;\u0026lt;label for=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div\u0026gt;\u0026lt;label for=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;   Multiple zeros ul\u0026gt;li.item$$$2*5 \u0026lt;ul\u0026gt;\u0026lt;li class=\u0026quot;item001\u0026quot;\u0026gt;\u0026lt;/li\u0026gt;...\u0026lt;li class=\u0026quot;item005\u0026quot;\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;   Start from different base p#id$@34*4 \u0026lt;p id=\u0026quot;id34\u0026quot;\u0026gt;\u0026lt;/p\u0026gt;...\u0026lt;p id=\u0026quot;id37\u0026quot;\u0026gt;\u0026lt;/p\u0026gt;   Counter in text starting from 2 span{I have $@2 cats}*8 \u0026lt;span\u0026gt;I have 2 cats\u0026lt;/span\u0026gt;...\u0026lt;span\u0026gt;I have 9 cats\u0026lt;/span\u0026gt;    Implicit tag names Emmet can assume some tagnames based on context. For example unordered lists can only contain li tags, table contains trs, and trs contain tds. Divs are commonly used, so if you don\u0026rsquo;t use any tag, and the context does not tell it otherwise then it can assume you meant to use divs.\n   What Short Long     div .wrap\u0026gt;.content div.wrap\u0026gt;div.content   span em\u0026gt;.info em\u0026gt;span.info   list ul\u0026gt;.item*3 ul\u0026gt;li.item*3   table table\u0026gt;#row$*4\u0026gt;[colspan=2] table\u0026gt;tr#row$*4\u0026gt;td[colspan=2]    Things to be aware of  Note that space is a stop symbol where Emmet stops abbreviation parsing, so do not use it outside {}. When you expand an emmet abbreviation the cursor has to be at the end of the statement.  HTML, CSS, XSL There are many abbreviations to check out. I recommend the official cheat sheet for this purpose.\nEmmet in React Since last year I\u0026rsquo;ve been coding in React with .js files for frontend development. As you might have noticed .js is not in the default enabled list above, so I haven\u0026rsquo;t used my emmet knowledge for a while.\nA few days ago I looked around, and I\u0026rsquo;ve found a way to turn on emmet for react javascript files that do not have .jsx extension. I just needed to set this in VS Code\u0026rsquo;s settings.json.\n{ \u0026#34;emmet.includeLanguages\u0026#34;: { \u0026#34;javascript\u0026#34;: \u0026#34;javascriptreact\u0026#34; } } Finally I can use it again! This rediscovery inspired me to write about this tool, and share how much I love it. I hope I was able to prove how simple and powerful it is.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2020/04/12/emmet/","summary":"\u003cp\u003eIn my opinion Emmet is an essential tool for web developers.\nYou can code in abbreviations that you can translate into html layouts, css styles, or even xsl transformations.\nThese handy shortcuts make development faster, if you know what you can use by heart.\u003c/p\u003e","title":"Emmet"},{"content":"A few days ago I came across a tweet about Jetbrains Mono, the new free and open source font of Jetbrains. I have never used custom fonts for my developer environments, so I thought it would be a good start to give it a shot. Long story short, it was totally worth it.\nThis font is designed for developers, it is optimized to reduce eye strain that can occur when we scan quickly between multiple lines of code. It\u0026rsquo;s characters are of course monospace and easily distinguishable. Its lowercase characters have increased height. It has 138 code specific ligatures, some are merged characters, others are just whitespace balanced character pairs.\nI immediately fell for the difference between the curly brackets and parentheses. Differenciating between lowercase L, one and uppercase i can be difficult with other fonts, but this font makes them completely different. I turned on ligatures as well, my favourites are the arrows, comparisons lte, gte, and the double slash for comments.\nThis font is used in Jetbrains applications' latest versions (starting from v2019.3), currently I only use DataGrip from that repertoire. For my daily work I use the iTerm2 terminal and VSCode. It was quite simple to set them up.\nFrom this point there\u0026rsquo;s no turning back to default fonts.\n","permalink":"http://budavariam.github.io/posts/2020/02/08/developer-font/","summary":"\u003cp\u003eA few days ago I came across a tweet about \u003ca href=\"https://www.jetbrains.com/lp/mono/\"\u003eJetbrains Mono\u003c/a\u003e,\nthe new free and open source font of Jetbrains.\nI have never used custom fonts for my developer environments, so I thought it would be a good start to give it a shot.\nLong story short, it was totally worth it.\u003c/p\u003e","title":"Developer font"},{"content":"I have an application that logs a lot, and during development I got tired of looking through the command line for the error logs, that were hidden by other logs (that were also necessary). So I looked around what is the preferred way of handling logs nowadays.\nSome years ago I\u0026rsquo;ve worked on a project, where we used the ELK stack to provide configurable dashboards and realtime logs for monitoring. We used it, but I was not working with it directly. It seemed like a good idea to revisit how it actually works.\nI already knew that I only want to play around with it so I did not need to run a production ready server for it.\nFor my usecase a local virtualized install would do. I searched for existing configured stacks, and I\u0026rsquo;ve found exactly what I was looking for. Huge thanks for deviantony\u0026rsquo;s docker-elk repository. I forked it and started to explore.\nMy github repo is available here.\nWhat is ELK ELK is a stack that consists of 3 opensource tools Elasticsearch, Logstash and Kibana and lets you store logs and create visualizations based on those logs in realtime.\n Logstash collects the logs Elasticsearch stores them Kibana lets you visualize and explore them  Simple as that.\nFilebeat What the starting stack was missing was a way to send logs to logstash. I read about different ways and decided to add a filebeat extension to read logs from the file system.\n Beats is the platform for single-purpose data shippers. They send data from hundreds or thousands of machines and systems to Logstash or Elasticsearch.\n source\nElasticsearch provides docker image for these beats, so the configuration was pretty straightforward.\nARG ELK_VERSIONFROMdocker.elastic.co/beats/filebeat:${ELK_VERSION}I needed to provide a config, and a volume to /var/log/apps.\nIn my configuration I experimented with multiline configuration, to avoid sending multiple entries for a single log message.\nI check if the line matches with the ^(DEBUG|INFO|WARNING|ERROR|FATAL) regexp, if it does, then starts a new line, otherwise the line gets appended to the previous line.\nmultiline.pattern: '^(DEBUG|INFO|WARNING|ERROR|FATAL)' multiline.negate: true multiline.match: after Logstash I\u0026rsquo;ve played around with logstash configurations for a while, until I found a solution that I was happy with. I\u0026rsquo;ve found GROK debugger a useful tool, and it helped me to browse the basic types.\nWhile I was playing around it made me realize how important it is to provide consistent and easily parsable logs to make monitoring and error research easier to track bugs.\nSplit log message My golang code logs with a specific logger. Logstash gave me a hard time and docs/github issue browsing until I found that golang supports nanosecond precision while elasticsearch \u0026ldquo;only\u0026rdquo; uses microseconds precision, so I needed to trim the last 3 digits from the timestamp.\ngrok { match =\u0026gt; { \u0026quot;source\u0026quot; =\u0026gt; \u0026quot;%{GREEDYDATA}/%{GREEDYDATA:app}.log\u0026quot; \u0026quot;message\u0026quot; =\u0026gt; \u0026quot;%{LOGLEVEL:loglevel}:\\s+(?\u0026lt;timestamp\u0026gt;%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME})\\s+%{GREEDYDATA:logmsg}\u0026quot; } } ## golang has nanosecond precision, elasticsearch has microseconds precision, trim last 3 numbers mutate { gsub =\u0026gt; [\u0026quot;timestamp\u0026quot;,\u0026quot;\\d\\d\\d$\u0026quot;,\u0026quot;\u0026quot;] } Use log date as @timestamp The next challenge that I gave myself to use log date as the elasticsearch timestamp. In logstash it is straightforward, I need to use the date filter to convert my data to date, it needs the source with the timestamp format and the target field.\ndate { match =\u0026gt; [ \u0026quot;timestamp\u0026quot;, \u0026quot;YYYY/MM/dd HH:mm:ss.SSS\u0026quot; ] target =\u0026gt; \u0026quot;@timestamp\u0026quot; } Putting it all together I fired it all up with docker-compose -f docker-compose.yml -f extensions/filebeat-compose/filebeat-compose.yml up.\nI needed to add an index pattern to match logstash, and wait for micarle. When when the data finally started to flow and show up in kibana it was an amazing feeling, that was worth the few days of fiddling around.\nI managed to separate the data from the logs that I needed, and now I am able to save queries and dashboards based on specific cases.\nFinal thoughts I felt lucky that one version number is necessary, and it just works. I can imagine that it can be painful to manage configuration errors.\nI usually work in both frontend and backend side of the code, recently I got into managing CI/CD pipelines and deploying to different environments, but now I felt like I got a bit more taste of the devops world.\n","permalink":"http://budavariam.github.io/posts/2020/01/18/elk-adventures/","summary":"\u003cp\u003eI have an application that logs a lot, and during development I got tired of looking through the command line for the error logs, that were hidden by other logs (that were also necessary). So I looked around what is the preferred way of handling logs nowadays.\u003c/p\u003e","title":"ELK adventures"},{"content":"Markdown makes it easy to write formatted text quickly. It\u0026rsquo;s a plain text format that uses basic notations to add semantics to the document. The format is widely adopted, it is a very simple and efficient tool in the hands of a developer.\nIt\u0026rsquo;s common to write the documentation in markdown format, then generate static websites/pages from it.\nMost developers like it because the modifications can be tracked in version control systems, and does not need a special editor.\nBasic syntax The markdown document translates to simple HTML.\nFor example, if the line starts with # Heading it will be converted to \u0026lt;h1\u0026gt;Heading\u0026lt;/h1\u0026gt; upon viewing.\nHere are the minimal syntax that every developer needs to know:\n\u0026lt;!-- Commented text --\u0026gt; \u0026lt;!-- Headings --\u0026gt; # h1 heading ## H2 heading ### H3 heading #### H4 heading ##### H5 heading  \u0026lt;!-- Paragraphs --\u0026gt; One empty line creates a new paragraph. This line starts in a new line but still in the same paragraph. This is a separate paragraph \u0026lt;!-- Unordered List --\u0026gt; - item 1 - nested list - item 2 - item 3 \u0026lt;!-- Ordered List --\u0026gt; 1. item 1 1. nested list 1. item 2 1. item 3 \u0026lt;!-- Horizontal Divider Line --\u0026gt; --- \u0026lt;!-- Link --\u0026gt; [alt text](./anchor/href/url) \u0026lt;!-- Image --\u0026gt; ![embedded image alt text](./embedded/image/path) \u0026lt;!-- Text Format --\u0026gt; *italic* **bold** ~~strike through~~ \u0026lt;!-- Quote --\u0026gt; \u0026gt; multi line \u0026gt; quoted text  \u0026lt;!-- Embedded code --\u0026gt; monospace code: `here` ```bash #!/bin/bash # this is a bash highlighter fenced code block pwd ``` \u0026lt;!-- Table --\u0026gt; table col 1 | table col 2 | table col 3 --- | --- | --- row 11 | row 12 | row 13 row 21 | row 22 | row 23 row 31 | row 31 | row 33 Converters Markdown is widely supported on the web:\n many applications let you write formatted text in markdown. README.md files in the projects are converted and viewable on the site for example in github, gitlab and npm. some messaging apps let you format messages in markdown syntax static site generators create HTML pages from markdown documents  Most of the time you don\u0026rsquo;t need to worry about converting them. However, you have the option to add markdown support to your website. You can also convert them to other formats, like pdf or latex.\nPandoc Pandoc is the swiss army knife of converting between markup formats.\nMy favorite part is that it can export my doc to pdf.\npandoc README.md --pdf-engine=xelatex -o documentation.pdf Markdown-it Markdown-it provides a simple way to render markdown text into a webpage in javascript.\nDifferent flavors When I started to learn markdown, the most confusing part for me was that the format has different implementations, and they come with different extensions. As I later found out the initial description of Markdown contained ambiguities and unanswered questions, so the implementations that appeared over the years have subtle differences and many come with syntax extensions.\nCommonMark comes to the rescue and provides a consistent way to write markdown. If the parser you use support it, you can be sure that it works as expected.\nGithub adds extra features on CommonMark, like emojis and marks for task completion.\nStyleguide The style and syntax are not enforced, if the document has an error, it will be converted anyway, only the result will most likely not look as intended.\nI recommend you to use a linter, like markdownlint to keep your markdown files consistent. Markdownlint has many rules, that points out errors and warns you about coding style best practices.\nHappy coding!\n","permalink":"http://budavariam.github.io/posts/2019/05/01/plaintext-docs-in-markdown/","summary":"\u003cp\u003e\u003ca href=\"https://www.markdownguide.org/\"\u003eMarkdown\u003c/a\u003e makes it easy to write formatted text quickly.\nIt\u0026rsquo;s a plain text format that uses basic notations to add semantics to the document.\nThe format is widely adopted, it is a very simple and efficient tool in the hands of a developer.\u003c/p\u003e","title":"Plaintext Docs In Markdown"},{"content":"Imagine you want to submit a huge merge request (gitlab terminology), that has many changes from a bunch of commits. You realize that you don\u0026rsquo;t want to see some changes, but these changes are not in separate commits, so they can\u0026rsquo;t be easily reverted. There are a lot of small changes. You don\u0026rsquo;t want to type their reverse, or copy-paste for minutes. You want to keep the commits, not squash them together in the end. What would you do?\nI did not want to spend time to find the perfect solution, so I came up with a quick one.\nWhat I really wanted is to see all changes in one commit, that I saw in my merge request, and select the code I wanted to get rid of, then apply these changes to my original branch.\nIn order to achieve that, I got the latest master, created a sandbox branch, squashed my target branch inside it, selected what code I wanted to get rid of, reverted that commit, and cherry picked it to my target branch.\nSANDBOX_BRANCH=sandbox TARGET_BRANCH=target # 1. Get a clear sandbox with recent master git checkout master git pull git checkout -b $SANDBOX_BRANCH ## 2. Get all changes as one commit git merge $TARGET_BRANCH --squash # ... select only the unnecessary code, # ... that you want to revert git add . git commit -m \u0026#34;Unnecessary code\u0026#34; git revert HEAD HASH=`git rev-parse --short HEAD` ## 3. Apply the inverse changes, cleanup git checkout $TARGET_BRANCH git cherry-pick $HASH git commit --amend -v # rename commit git branch -D $SANDBOX_BRANCH Enjoy :)\nP.S: Let me know if you have a better idea.\n","permalink":"http://budavariam.github.io/posts/2019/04/25/groom-merge-request/","summary":"\u003cp\u003eImagine you want to \u003cstrong\u003esubmit a huge merge request\u003c/strong\u003e (\u003cem\u003egitlab terminology\u003c/em\u003e),\nthat has many changes from a bunch of commits.\n\u003cstrong\u003eYou realize that you don\u0026rsquo;t want to see some changes\u003c/strong\u003e,\nbut these changes are not in separate commits, so they can\u0026rsquo;t be easily reverted.\nThere are a lot of small changes. You don\u0026rsquo;t want to type their reverse, or copy-paste for minutes.\nYou want to keep the commits, not squash them together in the end.\n\u003cstrong\u003eWhat would you do?\u003c/strong\u003e\u003c/p\u003e","title":"Groom merge request"},{"content":"A few days ago I\u0026rsquo;ve been thinking whether there\u0026rsquo;s a more interactive way of learning flexbox, rather than this great guide.\nI know the basics, the concept, read this introduction many times, but I had to look up the parameters all the time.\nIn my not so comprehensive searching I\u0026rsquo;ve found 2 great interactive tutorials.\n  Webflow tutorial feels like a way to introduce the flexbox possibilities in its user interface, but a great way to practice with real examples. It can be clicked through in a few hours.\n  Flexbox zombies is a great way to keep the knowledge in your hands. You practice by writing code. The task difficulties increase slowly and gradually, first it holds your hand, then let you practice alone. It advices you to keep longer breaks between the sections to let your earned knowledge rest, and that way stay longer with you. I love the story, i love the artwork. Originally it is a course that you can get for $225, but currently it is open for enrollbent for free. It consists of 12 lessons, I keep a day between levels, so it is definitely not a quick tutorial.\n ","permalink":"http://budavariam.github.io/posts/2018/05/06/flexbox-zombies/","summary":"\u003cp\u003eA few days ago I\u0026rsquo;ve been thinking whether there\u0026rsquo;s a more interactive way of learning flexbox, rather than \u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\u003ethis great guide\u003c/a\u003e.\u003c/p\u003e","title":"Flexbox zombies"},{"content":"I just started my github pages site supported by Jekyll.\n","permalink":"http://budavariam.github.io/posts/2018/03/03/hello-world/","summary":"\u003cp\u003eI just started my \u003ca href=\"https://pages.github.com/\"\u003egithub pages\u003c/a\u003e\nsite supported by \u003ca href=\"https://jekyllrb.com/\"\u003eJekyll\u003c/a\u003e.\u003c/p\u003e","title":"Hello world"}]