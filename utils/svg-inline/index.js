#! /usr/bin/node
/* jslint esversion: 6 */

const fs = require('fs');
const path = require('path');
const { optimize } = require('svgo');

const STARTDIR = path.join(__dirname, '..', 'svg-icons');
const RESULTFILE = path.join(__dirname, '..', '..', 'themes', 'PaperModBudavariam', 'layouts', 'partials', 'svg_circle.html');

regenerateCustomIcons(STARTDIR, RESULTFILE, saveResult);

function saveResult(targetFile, data, ids) {
    fs.writeFile(targetFile, data, "utf8", (err) => {
        if (err) {
            console.error("There was an error during config file saving...", err);
            throw err;
        }
        console.log(`Updated custom SVG icons in ${targetFile}.\n IDS: ${ids.join(", ")}`);
    });
}

function regenerateCustomIcons(startDir, resultFile, done) {
    collectSVGFiles(startDir, (fileData) => {
        const ids = [];
        const result = [
            "<!-- This file is generated from the svg files in the blog utils/svg-icons folder. ",
            "     Please do not edit this file manually, because it might be overwritten. -->",
            "",
            `{{ $icon_name := ( trim .name " " | lower )}}`,
            "",
        ];
        fileData.sort((a,b) => a.fileName.localeCompare(b.fileName)).forEach((data, index) => {
            ids.push(data.fileName);
            result.push(`{{- ${index === 0 ? ' ' : 'else '}if (eq $icon_name "${data.fileName}") -}}`);
            result.push(`${data.fileData}`);
        });
        result.push('{{- end -}}');
        result.push('');

        done(resultFile, result.join('\n'), ids);
    });
}

function modifySVG(fileName) {
    //svgToBase64(filepath);
    const data = fs.readFileSync(fileName);
    const result = optimize(data, {
        // optional but recommended field
        path: fileName,
        // all config fields are also available here
        multipass: true,
        // options: https://www.npmjs.com/package/svgo#user-content-built-in-plugins
    })

    return result.data
}


function collectSVGFiles(dir, done) {
    const fileContents = [];
    fs.readdir(dir, (err, files) => {
        if (err) {
            return error(err);
        }
        let statCallbacks = files.length;
        files.forEach((file) => {
            const filepath = path.join(dir, file);
            fs.stat(filepath, (statError, stats) => {
                if (statError) {
                    return error(statError);
                }
                statCallbacks--;
                if (stats.isFile() && path.extname(file) === '.svg') {
                    const fileName = path.basename(file, '.svg');
                    const fileData = modifySVG(filepath);
                    fileContents.push({
                        fileName,
                        fileData,
                    });
                }
                // If all the statCallbacks are complete for this
                // directory, decrement the `readdirCallbacks` and
                // check to see if this is actually the last one.
                if (statCallbacks === 0) {
                    return done(fileContents);
                }
            });
        });
    });
}
