#! /usr/bin/node
/* jslint esversion: 6 */

const fs = require('fs');
const path = require('path');
const svgToBase64 = require('./svg-to-base64');

const STARTDIR = path.join(__dirname, '..', '..', 'images', 'svg-icons');
const RESULTFILE = path.join(__dirname, '..', '..', '_sass', '_svg-icons-custom.scss');
regenerateCustomIcons(STARTDIR, RESULTFILE, saveResult);

function saveResult(targetFile, data, ids){
    fs.writeFile(targetFile, data, "utf8", (err) => {
        if (err) {
            console.error("There was an error during config file saving...", err);
            throw err;
        }
        console.log(`Updated custom SVG icons in ${targetFile}.\n IDS: ${ids.join(", ")}`);
    });
}

function regenerateCustomIcons(startDir, resultFile, done){
    collectSVGFiles(startDir, (fileData) => {
        const ids = [];
        const result = [
            "// This file is generated from the svg files in images folder.",
            "// Please do not edit this file manually, because it might be overwritten.",
            "$svg-icons-custom: ("
        ];
        fileData.forEach((data) => {
            ids.push(data.fileName);
            result.push(`  ${data.fileName}: '${data.base64}',`);
        });
        result.push(')');
        done(resultFile, result.join('\n'), ids);
    });
}


function collectSVGFiles(dir, done){
    const fileContents = [];
    fs.readdir(dir, (err, files) => {
        if (err) {
            return error(err);
        }
        let statCallbacks = files.length;
        files.forEach((file) => {
            const filepath = path.join(dir, file);
            fs.stat(filepath, (statError, stats) => {
                if (statError) {
                    return error(statError);
                }
                statCallbacks--;
                if (stats.isFile() && path.extname(file) === '.svg') {
                    const fileName = path.basename(file, '.svg');
                    const base64 = svgToBase64(filepath);
                    fileContents.push({
                        fileName,
                        base64
                    });
                }
                // If all the statCallbacks are complete for this
                // directory, decrement the `readdirCallbacks` and
                // check to see if this is actually the last one.
                if (statCallbacks === 0) {
                    return done(fileContents);
                }
            });
        });
    });
}
